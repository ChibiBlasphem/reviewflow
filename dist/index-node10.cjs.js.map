{"version":3,"file":"index-node10.cjs.js","sources":["../src/teamconfigs/ornikar.ts","../src/teamconfigs/christophehurpeau.ts","../src/teamconfigs/index.ts","../src/pr-handlers/actions/autoMergeIfPossible.ts","../src/context/initRepoLabels.ts","../src/context/utils.ts","../src/context/initTeamSlack.ts","../src/context/teamContext.ts","../src/context/repoContext.ts","../src/pr-handlers/utils.ts","../src/pr-handlers/actions/autoAssignPRToCreator.ts","../src/pr-handlers/actions/utils/cleanTitle.ts","../src/pr-handlers/actions/editOpenedPR.ts","../src/pr-handlers/actions/lintPR.ts","../src/pr-handlers/actions/updateStatusCheckFromLabels.ts","../src/pr-handlers/actions/updateReviewStatus.ts","../src/pr-handlers/opened.ts","../src/pr-handlers/closed.ts","../src/pr-handlers/reviewRequested.ts","../src/pr-handlers/reviewRequestRemoved.ts","../src/pr-handlers/reviewSubmitted.ts","../src/pr-handlers/reviewDismissed.ts","../src/pr-handlers/synchronize.ts","../src/pr-handlers/edited.ts","../src/pr-handlers/labelsChanged.ts","../src/pr-handlers/checkrunCompleted.ts","../src/pr-handlers/checksuiteCompleted.ts","../src/pr-handlers/status.ts","../src/index.ts"],"sourcesContent":["import { Config } from './types';\n\nconst config: Config<'dev' | 'design'> = {\n  slackToken: process.env.ORNIKAR_SLACK_TOKEN,\n  autoAssignToCreator: true,\n  trimTitle: true,\n  requiresReviewRequest: true,\n  prLint: {\n    title: [\n      {\n        regExp:\n          // eslint-disable-next-line unicorn/no-unsafe-regex\n          /^(revert: )?(build|chore|ci|docs|feat|fix|perf|refactor|style|test)(\\(([a-z\\-/]*)\\))?:\\s/,\n        error: {\n          title: 'Title does not match commitlint conventional',\n          summary:\n            'https://github.com/marionebl/commitlint/tree/master/%40commitlint/config-conventional',\n        },\n      },\n      {\n        bot: false,\n        regExp: /\\s(ONK-(\\d+)|\\[no issue])$/,\n        error: {\n          title: 'Title does not have JIRA issue',\n          summary: 'The PR title should end with ONK-0000, or [no issue]',\n        },\n        status: 'jira-issue',\n        statusInfoFromMatch: (match) => {\n          const issue = match[1];\n          if (issue === '[no issue]') {\n            return {\n              title: 'No issue',\n              summary: '',\n            };\n          }\n          return {\n            url: `https://ornikar.atlassian.net/browse/${issue}`,\n            title: `JIRA issue: ${issue}`,\n            summary: `[${issue}](https://ornikar.atlassian.net/browse/${issue})`,\n          };\n        },\n      },\n    ],\n  },\n\n  groups: {\n    dev: {\n      abarreir: `alexandre${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      christophehurpeau: `christophe${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      arthurflachs: `arthur${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      skyline42sh: `alexandre.charbonnier${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      LentnerStefan: `stefan${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      HugoGarrido: `hugo${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      CorentinAndre: `corentin${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      rigma: `romain${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      Mxime: `maxime${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      damienorny: `damien.orny${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      tilap: `julien.lavinh${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      '63m29': `valerian${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n    },\n    design: {\n      jperriere: `julien${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      CoralineColasse: `coraline${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n    },\n  },\n  waitForGroups: {\n    dev: [],\n    design: ['dev'],\n  },\n  labels: {\n    list: {\n      // /* ci */\n      // 'ci/in-progress': { name: ':green_heart: ci/in-progress', color: '#0052cc' },\n      // 'ci/fail': { name: ':green_heart: ci/fail', color: '#e11d21' },\n      // 'ci/passed': { name: ':green_heart: ci/passed', color: '#86f9b4' },\n\n      /* code */\n      'code/needs-review': {\n        name: ':ok_hand: code/needs-review',\n        color: '#FFD57F',\n      },\n      'code/review-requested': {\n        name: ':ok_hand: code/review-requested',\n        color: '#B2E1FF',\n      },\n      'code/changes-requested': {\n        name: ':ok_hand: code/changes-requested',\n        color: '#e11d21',\n      },\n      'code/approved': {\n        name: ':ok_hand: code/approved',\n        color: '#64DD17',\n      },\n\n      /* design */\n      'design/needs-review': {\n        name: ':art: design/needs-review',\n        color: '#FFD57F',\n      },\n      'design/review-requested': {\n        name: ':art: design/review-requested',\n        color: '#B2E1FF',\n      },\n      'design/changes-requested': {\n        name: ':art: design/changes-requested',\n        color: '#e11d21',\n      },\n      'design/approved': {\n        name: ':art: design/approved',\n        color: '#64DD17',\n      },\n\n      /* auto merge */\n      'merge/automerge': {\n        name: ':soon: automerge',\n        color: '#64DD17',\n      },\n    },\n\n    review: {\n      ci: {\n        inProgress: 'ci/in-progress',\n        succeeded: 'ci/success',\n        failed: 'ci/fail',\n      },\n      dev: {\n        needsReview: 'code/needs-review',\n        requested: 'code/review-requested',\n        changesRequested: 'code/changes-requested',\n        approved: 'code/approved',\n      },\n      design: {\n        needsReview: 'design/needs-review',\n        requested: 'design/review-requested',\n        changesRequested: 'design/changes-requested',\n        approved: 'design/approved',\n      },\n    },\n  },\n};\n\nexport default config;\n","import { Config } from './types';\n\nconst config: Config<'dev'> = {\n  autoAssignToCreator: true,\n  trimTitle: true,\n  requiresReviewRequest: false,\n  prLint: {\n    title: [\n      {\n        regExp:\n          // eslint-disable-next-line unicorn/no-unsafe-regex\n          /^(revert: )?(build|chore|ci|docs|feat|fix|perf|refactor|style|test)(\\(([a-z\\-/]*)\\))?:\\s/,\n        error: {\n          title: 'Title does not match commitlint conventional',\n          summary:\n            'https://github.com/marionebl/commitlint/tree/master/%40commitlint/config-conventional',\n        },\n      },\n    ],\n  },\n  groups: {\n    dev: {\n      christophehurpeau: 'christophe@hurpeau.com',\n      'chris-reviewflow': 'christophe.hurpeau+reviewflow@gmail.com',\n    },\n  },\n  waitForGroups: {\n    dev: [],\n  },\n  labels: {\n    list: {\n      // /* ci */\n      // 'ci/in-progress': { name: ':green_heart: ci/in-progress', color: '#0052cc' },\n      // 'ci/fail': { name: ':green_heart: ci/fail', color: '#e11d21' },\n      // 'ci/passed': { name: ':green_heart: ci/passed', color: '#86f9b4' },\n\n      /* code */\n      'code/needs-review': {\n        name: ':ok_hand: code/needs-review',\n        color: '#FFD57F',\n      },\n      'code/review-requested': {\n        name: ':ok_hand: code/review-requested',\n        color: '#B2E1FF',\n      },\n      'code/changes-requested': {\n        name: ':ok_hand: code/changes-requested',\n        color: '#e11d21',\n      },\n      'code/approved': {\n        name: ':ok_hand: code/approved',\n        color: '#64DD17',\n      },\n\n      /* auto merge */\n      'merge/automerge': {\n        name: ':soon: automerge',\n        color: '#64DD17',\n      },\n      'merge/delete-branch': {\n        name: ':recycle: delete branch after merge',\n        color: '#64DD17',\n      },\n    },\n\n    review: {\n      ci: {\n        inProgress: 'ci/in-progress',\n        succeeded: 'ci/success',\n        failed: 'ci/fail',\n      },\n      dev: {\n        needsReview: 'code/needs-review',\n        requested: 'code/review-requested',\n        changesRequested: 'code/changes-requested',\n        approved: 'code/approved',\n      },\n    },\n  },\n};\n\nexport default config;\n","import { Config as ConfigType } from './types';\nimport ornikar from './ornikar';\nimport christophehurpeau from './christophehurpeau';\n\nexport type Config<GroupNames extends string = any> = ConfigType<GroupNames>;\n\nexport const teamConfigs: { [owner: string]: Config } = {\n  ornikar,\n  christophehurpeau,\n};\n\n// flat requires node 11\n// export const getMembers = <GroupNames extends string = any>(\n//   groups: Record<GroupNames, Group>,\n// ): string[] => {\n//   return Object.values(groups).flat(1);\n// };\n","import { Context } from 'probot';\n// eslint-disable-next-line import/no-cycle\nimport { RepoContext } from '../../context/repoContext';\nimport { LabelResponse } from '../../context/initRepoLabels';\n\nexport const autoMergeIfPossible = async (\n  context: Context<any>,\n  repoContext: RepoContext,\n  pr: any = context.payload.pull_request,\n  prLabels: LabelResponse[] = pr.labels,\n): Promise<boolean> => {\n  const autoMergeLabel = repoContext.labels['merge/automerge'];\n  if (!autoMergeLabel) return false;\n\n  const createMergeLockPrFromPr = () => ({\n    id: pr.id,\n    number: pr.number,\n    branch: pr.head.ref,\n  });\n\n  if (!prLabels.find((l: LabelResponse) => l.id === autoMergeLabel.id)) {\n    context.log.debug('automerge not possible: no label');\n    repoContext.removeMergeLockedPr(context, createMergeLockPrFromPr());\n    return false;\n  }\n\n  if (\n    repoContext.hasNeedsReview(prLabels) ||\n    repoContext.hasRequestedReview(prLabels)\n  ) {\n    context.log.debug('automerge not possible: blocking labels');\n    // repoContext.removeMergeLockedPr(context, createMergeLockPrFromPr());\n    return false;\n  }\n\n  const lockedPr = repoContext.getMergeLockedPr();\n  if (lockedPr && lockedPr.number !== pr.number) {\n    context.log.info(`automerge not possible: locked pr ${pr.id}`);\n    repoContext.pushAutomergeQueue(createMergeLockPrFromPr());\n    return false;\n  }\n\n  repoContext.addMergeLockPr(createMergeLockPrFromPr());\n\n  if (pr.mergeable === undefined) {\n    const prResult = await context.github.pulls.get(\n      context.repo({\n        number: pr.number,\n      }),\n    );\n    pr = prResult.data;\n  }\n\n  if (pr.merged) {\n    repoContext.removeMergeLockedPr(context, createMergeLockPrFromPr());\n    context.log.info(`automerge not possible: already merged pr ${pr.id}`);\n    return false;\n  }\n\n  context.log.info(\n    `automerge?: ${pr.id}, mergeable=${pr.mergeable} state=${\n      pr.mergeable_state\n    }`,\n  );\n\n  // https://github.com/octokit/octokit.net/issues/1763\n  if (\n    !(\n      pr.mergeable_state === 'clean' ||\n      pr.mergeable_state === 'has_hooks' ||\n      pr.mergeable_state === 'unstable'\n    )\n  ) {\n    if (!pr.mergeable_state || pr.mergeable_state === 'unknown') {\n      context.log.info(`automerge not possible: rescheduling ${pr.id}`);\n      // GitHub is determining whether the pull request is mergeable\n      repoContext.reschedule(context, createMergeLockPrFromPr());\n      return false;\n    }\n\n    if (pr.head.ref.startsWith('renovate/')) {\n      if (pr.mergeable_state === 'behind' || pr.mergeable_state === 'dirty') {\n        context.log.info(\n          `automerge not possible: rebase renovate branch pr ${pr.id}`,\n        );\n        // TODO check if has commits not made by renovate https://github.com/ornikar/shared-configs/pull/47#issuecomment-445767120\n\n        await context.github.issues.update(\n          context.repo({\n            number: pr.number,\n            body: pr.body.replace(\n              '[ ] <!-- renovate-rebase -->',\n              '[x] <!-- renovate-rebase -->',\n            ),\n          }),\n        );\n        return false;\n      } else {\n        const checks = await context.github.checks.listForRef(\n          context.repo({\n            ref: pr.head.sha,\n            per_page: 100,\n          }),\n        );\n\n        const hasFailedChecks = checks.data.check_runs.some(\n          (check) => check.conclusion === 'failure',\n        );\n        if (hasFailedChecks) {\n          context.log.info(`automerge not possible: failed check pr ${pr.id}`);\n          repoContext.removeMergeLockedPr(context, createMergeLockPrFromPr());\n          return false;\n        }\n\n        const statuses = await context.github.repos.listStatusesForRef(\n          context.repo({\n            ref: pr.head.sha,\n            per_page: 100,\n          }),\n        );\n\n        const hasFailedStatuses = statuses.data.some(\n          (status) => status.state === 'failure',\n        );\n        if (hasFailedStatuses) {\n          context.log.info(`automerge not possible: failed status pr ${pr.id}`);\n          repoContext.removeMergeLockedPr(context, createMergeLockPrFromPr());\n          return false;\n        }\n      }\n\n      context.log.info(\n        `automerge not possible: renovate with mergeable_state=${\n          pr.mergeable_state\n        }`,\n      );\n      return false;\n    }\n\n    if (pr.mergeable_state === 'behind') {\n      context.log.info('automerge not possible: update branch');\n\n      await context.github.repos.merge({\n        owner: pr.head.repo.owner.login,\n        repo: pr.head.repo.name,\n        base: pr.head.name,\n        head: pr.head.name,\n      });\n\n      return false;\n    }\n\n    repoContext.removeMergeLockedPr(context, createMergeLockPrFromPr());\n    context.log.info(\n      `automerge not possible: not mergeable mergeable_state=${\n        pr.mergeable_state\n      }`,\n    );\n    return false;\n  }\n\n  try {\n    context.log.info(`automerge pr #${pr.number}`);\n    const mergeResult = await context.github.pulls.merge({\n      merge_method: 'squash',\n      owner: pr.head.repo.owner.login,\n      repo: pr.head.repo.name,\n      number: pr.number,\n      commit_title: `${pr.title} (#${pr.number})`,\n      commit_message: '', // TODO add BC\n    });\n    context.log.debug('merge result:', mergeResult.data);\n    repoContext.removeMergeLockedPr(context, createMergeLockPrFromPr());\n    return Boolean(mergeResult.data.merged);\n  } catch (err) {\n    context.log.info('could not merge:', err.message);\n    repoContext.reschedule(context, createMergeLockPrFromPr());\n    return false;\n  }\n};\n","import { Context } from 'probot';\nimport { Config } from '../teamconfigs';\n\nexport interface LabelResponse {\n  id: number;\n  node_id: string;\n  url: string;\n  name: string;\n  description: string;\n  color: string;\n  default: boolean;\n}\n\nexport interface Labels {\n  [key: string]: LabelResponse;\n}\n\nexport const initRepoLabels = async <GroupNames extends string>(\n  context: Context<any>,\n  config: Config<GroupNames>,\n): Promise<Labels> => {\n  const { data: labels } = await context.github.issues.listLabelsForRepo(\n    context.repo({ per_page: 100 }),\n  );\n  const finalLabels: Record<string, LabelResponse> = {};\n\n  for (const [labelKey, labelConfig] of Object.entries(config.labels.list)) {\n    const labelColor = labelConfig.color.slice(1);\n    const description = `Generated by review-flow for ${labelKey}`;\n\n    let existingLabel = labels.find((label) => label.name === labelConfig.name);\n    if (!existingLabel) {\n      existingLabel = labels.find((label) => label.description === description);\n    }\n    if (!existingLabel) {\n      if (labelKey === 'design/needs-review') {\n        existingLabel = labels.find(\n          (label) => label.name === 'needs-design-review',\n        );\n      }\n      if (labelKey === 'design/approved') {\n        existingLabel = labels.find(\n          (label) => label.name === 'design-reviewed',\n        );\n      }\n    }\n\n    if (!existingLabel) {\n      const result = await context.github.issues.createLabel(\n        context.repo({\n          name: labelConfig.name,\n          color: labelColor,\n          description,\n        }),\n      );\n      finalLabels[labelKey] = result.data;\n    } else if (\n      existingLabel.name !== labelConfig.name ||\n      existingLabel.color !== labelColor // ||\n      // TODO: description is never updated\n      // existingLabel.description !== description\n    ) {\n      context.log.info('Needs to update label', {\n        current_name: existingLabel.name,\n        name: existingLabel.name !== labelConfig.name && labelConfig.name,\n        color: existingLabel.color !== labelColor && labelColor,\n        description: existingLabel.description !== description && description,\n      });\n\n      const result = await context.github.issues.updateLabel(\n        context.repo({\n          current_name: existingLabel.name,\n          name: labelConfig.name,\n          color: labelColor,\n          description,\n        }),\n      );\n      finalLabels[labelKey] = result.data;\n    } else {\n      finalLabels[labelKey] = existingLabel;\n    }\n  }\n\n  return finalLabels;\n};\n","export const getKeys = <T extends {}>(o: T): (keyof T)[] =>\n  Object.keys(o) as (keyof T)[];\n","import { WebClient } from '@slack/web-api';\nimport { Context } from 'probot';\nimport { Config } from '../teamconfigs';\nimport { getKeys } from './utils';\n\nexport interface TeamSlack {\n  mention: (githubLogin: string) => string;\n  postMessage: (githubLogin: string, text: string) => Promise<void>;\n}\n\nconst ExcludesFalsy = (Boolean as any) as <T>(\n  x: T | false | null | undefined,\n) => x is T;\n\nexport const initTeamSlack = async <GroupNames extends string>(\n  context: Context<any>,\n  config: Config<GroupNames>,\n): Promise<TeamSlack> => {\n  if (!config.slackToken) {\n    return {\n      mention: (githubLogin: string) => '',\n      postMessage: (githubLogin: string, text: string) => Promise.resolve(),\n    };\n  }\n\n  const githubLoginToSlackEmail = getKeys(config.groups).reduce<{\n    [login: string]: string;\n  }>((acc, groupName) => {\n    Object.assign(acc, config.groups[groupName]);\n    return acc;\n  }, {});\n\n  const slackClient = new WebClient(config.slackToken);\n  const allUsers: any = await slackClient.users.list({ limit: 200 });\n  const members: [string, { member: any; im: any }][] = Object.values(\n    githubLoginToSlackEmail,\n  )\n    .map((email) => {\n      const member = allUsers.members.find(\n        (user: any) => user.profile.email === email,\n      );\n      if (!member) {\n        console.warn(`Could not find user ${email}`);\n        return;\n      }\n      return [email, { member, im: undefined }] as [\n        string,\n        { member: any; im: any }\n      ];\n    })\n    .filter(ExcludesFalsy);\n\n  for (const [, user] of members) {\n    try {\n      const im: any = await slackClient.im.open({ user: user.member.id });\n      user.im = im.channel;\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  const membersMap = new Map(members);\n\n  const getUserFromGithubLogin = (githubLogin: string) => {\n    const email = githubLoginToSlackEmail[githubLogin];\n    if (!email) return null;\n    return membersMap.get(email);\n  };\n\n  return {\n    mention: (githubLogin: string) => {\n      const user = getUserFromGithubLogin(githubLogin);\n      if (!user) return githubLogin;\n      return `<@${user.member.id}>`;\n    },\n    postMessage: async (githubLogin: string, text: string) => {\n      context.log.info('send slack', { githubLogin, text });\n      if (process.env.DRY_RUN) return;\n\n      const user = getUserFromGithubLogin(githubLogin);\n      if (!user || !user.im) return;\n      await slackClient.chat.postMessage({\n        channel: user.im.id,\n        text,\n      });\n    },\n  };\n};\n","import { Context } from 'probot';\nimport { Config } from '../teamconfigs';\nimport { initTeamSlack, TeamSlack } from './initTeamSlack';\nimport { getKeys } from './utils';\n\nexport interface TeamContext<GroupNames extends string = any> {\n  config: Config<GroupNames>;\n  slack: TeamSlack;\n  getReviewerGroup: (githubLogin: string) => string | undefined;\n  getReviewerGroups: (githubLogins: string[]) => string[];\n  reviewShouldWait: (\n    reviewerGroup: GroupNames | undefined,\n    requestedReviewers: any[],\n    {\n      includesReviewerGroup,\n      includesWaitForGroups,\n    }: { includesReviewerGroup?: boolean; includesWaitForGroups?: boolean },\n  ) => boolean;\n}\nconst ExcludesFalsy = (Boolean as any) as <T>(\n  x: T | false | null | undefined,\n) => x is T;\n\nconst initTeamContext = async (\n  context: Context<any>,\n  config: Config,\n): Promise<TeamContext> => {\n  const slackPromise = initTeamSlack(context, config);\n\n  const githubLoginToGroup = getKeys(config.groups).reduce<Map<string, string>>(\n    (acc, groupName) => {\n      Object.keys(config.groups[groupName]).forEach((login) => {\n        acc.set(login, groupName);\n      });\n      return acc;\n    },\n    new Map(),\n  );\n\n  const getReviewerGroups = (githubLogins: string[]) => [\n    ...new Set(\n      githubLogins\n        .map((githubLogin) => githubLoginToGroup.get(githubLogin))\n        .filter(Boolean),\n    ),\n  ];\n\n  return {\n    config,\n    getReviewerGroup: (githubLogin) => githubLoginToGroup.get(githubLogin),\n    getReviewerGroups: (githubLogins) => [\n      ...new Set(\n        githubLogins\n          .map((githubLogin) => githubLoginToGroup.get(githubLogin))\n          .filter(ExcludesFalsy),\n      ),\n    ],\n\n    reviewShouldWait: (\n      reviewerGroup,\n      requestedReviewers,\n      { includesReviewerGroup, includesWaitForGroups },\n    ) => {\n      if (!reviewerGroup) return false;\n\n      const requestedReviewerGroups = getReviewerGroups(\n        requestedReviewers.map((request) => request.login),\n      );\n\n      // contains another request of a reviewer in the same group\n      if (\n        includesReviewerGroup &&\n        requestedReviewerGroups.includes(reviewerGroup)\n      ) {\n        return true;\n      }\n\n      // contains a request from a dependent group\n      if (config.waitForGroups && includesWaitForGroups) {\n        const waitForGroups = config.waitForGroups;\n        return requestedReviewerGroups.some((group) =>\n          waitForGroups[reviewerGroup].includes(group),\n        );\n      }\n\n      return false;\n    },\n\n    slack: await slackPromise,\n  };\n};\n\nconst teamContextsPromise = new Map();\nconst teamContexts = new Map();\n\nexport const obtainTeamContext = (\n  context: Context<any>,\n  config: Config,\n): Promise<TeamContext> => {\n  const owner = context.payload.repository.owner;\n\n  const existingTeamContext = teamContexts.get(owner.login);\n  if (existingTeamContext) return existingTeamContext;\n\n  const existingPromise = teamContextsPromise.get(owner.login);\n  if (existingPromise) return Promise.resolve(existingPromise);\n\n  const promise = initTeamContext(context, config);\n  teamContextsPromise.set(owner.login, promise);\n\n  return promise.then((teamContext) => {\n    teamContextsPromise.delete(owner.login);\n    teamContexts.set(owner.login, teamContext);\n    return teamContext;\n  });\n};\n","/* eslint-disable max-lines */\n\nimport { Lock } from 'lock';\nimport { Context } from 'probot';\nimport { teamConfigs, Config } from '../teamconfigs';\n// eslint-disable-next-line import/no-cycle\nimport { autoMergeIfPossible } from '../pr-handlers/actions/autoMergeIfPossible';\nimport { initRepoLabels, LabelResponse, Labels } from './initRepoLabels';\nimport { obtainTeamContext, TeamContext } from './teamContext';\n\nexport interface LockedMergePr {\n  id: number;\n  number: number;\n  branch: string;\n}\n\ninterface RepoContextWithoutTeamContext<GroupNames extends string> {\n  labels: Labels;\n  protectedLabelIds: LabelResponse['id'][];\n\n  hasNeedsReview: (labels: LabelResponse[]) => boolean;\n  hasRequestedReview: (labels: LabelResponse[]) => boolean;\n  hasChangesRequestedReview: (labels: LabelResponse[]) => boolean;\n  hasApprovesReview: (labels: LabelResponse[]) => boolean;\n  getNeedsReviewGroupNames: (labels: LabelResponse[]) => GroupNames[];\n\n  lockPROrPRS(\n    prIdOrIds: string | string[],\n    callback: () => Promise<void> | void,\n  ): Promise<void>;\n\n  getMergeLockedPr(): LockedMergePr;\n  addMergeLockPr(pr: LockedMergePr): void;\n  removeMergeLockedPr(context: Context<any>, pr: LockedMergePr): void;\n  reschedule(context: Context<any>, pr: LockedMergePr): void;\n  pushAutomergeQueue(pr: LockedMergePr): void;\n}\n\nconst ExcludesFalsy = (Boolean as any) as <T>(\n  x: T | false | null | undefined,\n) => x is T;\n\nexport type RepoContext<GroupNames extends string = any> = TeamContext<\n  GroupNames\n> &\n  RepoContextWithoutTeamContext<GroupNames>;\n\nasync function initRepoContext<GroupNames extends string>(\n  context: Context<any>,\n  config: Config<GroupNames>,\n): Promise<RepoContext<GroupNames>> {\n  const teamContext = await obtainTeamContext(context, config);\n  const repoContext = Object.create(teamContext);\n\n  const [labels] = await Promise.all([initRepoLabels(context, config)]);\n\n  const reviewGroupNames = Object.keys(config.groups) as GroupNames[];\n\n  const needsReviewLabelIds = reviewGroupNames\n    .map((key: GroupNames) => config.labels.review[key].needsReview)\n    .filter(Boolean)\n    .map((name) => labels[name].id);\n\n  const requestedReviewLabelIds = reviewGroupNames\n    .map((key) => config.labels.review[key].requested)\n    .filter(Boolean)\n    .map((name) => labels[name].id);\n\n  const changesRequestedLabelIds = reviewGroupNames\n    .map((key) => config.labels.review[key].changesRequested)\n    .filter(Boolean)\n    .map((name) => labels[name].id);\n\n  const approvedReviewLabelIds = reviewGroupNames\n    .map((key) => config.labels.review[key].approved)\n    .filter(Boolean)\n    .map((name) => labels[name].id);\n\n  const labelIdToGroupName = new Map<LabelResponse['id'], GroupNames>();\n  reviewGroupNames.forEach((key) => {\n    const reviewGroupLabels = config.labels.review[key] as any;\n    Object.keys(reviewGroupLabels).forEach((labelKey: string) => {\n      labelIdToGroupName.set(labels[reviewGroupLabels[labelKey]].id, key);\n    });\n  });\n\n  // const updateStatusCheck = (context, reviewGroup, statusInfo) => {};\n\n  const hasNeedsReview = (labels: LabelResponse[]) =>\n    labels.some((label) => needsReviewLabelIds.includes(label.id));\n  const hasRequestedReview = (labels: LabelResponse[]) =>\n    labels.some((label) => requestedReviewLabelIds.includes(label.id));\n  const hasChangesRequestedReview = (labels: LabelResponse[]) =>\n    labels.some((label) => changesRequestedLabelIds.includes(label.id));\n  const hasApprovesReview = (labels: LabelResponse[]) =>\n    labels.some((label) => approvedReviewLabelIds.includes(label.id));\n\n  const getNeedsReviewGroupNames = (labels: LabelResponse[]): GroupNames[] =>\n    labels\n      .filter((label) => needsReviewLabelIds.includes(label.id))\n      .map((label) => labelIdToGroupName.get(label.id))\n      .filter(ExcludesFalsy);\n\n  const lock = Lock();\n  let lockMergePr: LockedMergePr | undefined;\n  const automergeQueue: LockedMergePr[] = [];\n\n  const lockPROrPRS = (\n    prIdOrIds: string | string[],\n    callback: () => Promise<void> | void,\n  ): Promise<void> =>\n    new Promise((resolve, reject) => {\n      console.log('lock: try to lock pr', { prIdOrIds });\n      lock(prIdOrIds, async (createReleaseCallback) => {\n        const release = createReleaseCallback(() => {});\n        console.log('lock: lock acquired', { prIdOrIds });\n        try {\n          await callback();\n        } catch (err) {\n          console.log('lock: release pr (with error)', { prIdOrIds });\n          release();\n          reject(err);\n          return;\n        }\n        console.log('lock: release pr', { prIdOrIds });\n        release();\n        resolve();\n      });\n    });\n\n  const reschedule = (context: Context<any>, pr: LockedMergePr) => {\n    if (!pr) throw new Error('Cannot reschedule undefined');\n    context.log.info('reschedule', pr);\n    setTimeout(() => {\n      lockPROrPRS('reschedule', () => {\n        return lockPROrPRS(String(pr.id), async () => {\n          const prResult = await context.github.pulls.get(\n            context.repo({\n              number: pr.number,\n            }),\n          );\n          await autoMergeIfPossible(context, repoContext, prResult.data);\n        });\n      });\n    }, 1000);\n  };\n\n  return Object.assign(repoContext, {\n    labels,\n    protectedLabelIds: [\n      ...requestedReviewLabelIds,\n      ...changesRequestedLabelIds,\n      ...approvedReviewLabelIds,\n    ],\n    hasNeedsReview,\n    hasRequestedReview,\n    hasChangesRequestedReview,\n    hasApprovesReview,\n    getNeedsReviewGroupNames,\n\n    getMergeLockedPr: () => lockMergePr,\n    addMergeLockPr: (pr: LockedMergePr): void => {\n      console.log('merge lock: lock', pr);\n      if (lockMergePr && lockMergePr.number === pr.number) return;\n      if (lockMergePr) throw new Error('Already have lock');\n      lockMergePr = pr;\n    },\n    removeMergeLockedPr: (context, pr: LockedMergePr): void => {\n      console.log('merge lock: remove', pr);\n      if (!lockMergePr || lockMergePr.number !== pr.number) return;\n      lockMergePr = automergeQueue.shift();\n      console.log('merge lock: next', lockMergePr);\n      if (lockMergePr) {\n        reschedule(context, lockMergePr);\n      }\n    },\n    pushAutomergeQueue: (pr: LockedMergePr): void => {\n      console.log('merge lock: push queue', {\n        pr,\n        lockMergePr,\n        automergeQueue,\n      });\n      if (!automergeQueue.some((p) => p.number === pr.number)) {\n        automergeQueue.push(pr);\n      }\n    },\n    reschedule,\n\n    lockPROrPRS,\n  } as RepoContextWithoutTeamContext<GroupNames>);\n}\n\nconst repoContextsPromise = new Map<number, Promise<RepoContext>>();\nconst repoContexts = new Map<number, RepoContext>();\n\nexport const obtainRepoContext = (\n  context: Context<any>,\n): Promise<RepoContext> | RepoContext | null => {\n  const owner = context.payload.repository.owner;\n  if (!teamConfigs[owner.login]) {\n    console.warn(owner.login, Object.keys(teamConfigs));\n    return null;\n  }\n  const key = context.payload.repository.id;\n\n  const existingRepoContext = repoContexts.get(key);\n  if (existingRepoContext) return existingRepoContext;\n\n  const existingPromise = repoContextsPromise.get(key);\n  if (existingPromise) return Promise.resolve(existingPromise);\n\n  const promise = initRepoContext(context, teamConfigs[owner.login]);\n  repoContextsPromise.set(key, promise);\n\n  return promise.then((repoContext) => {\n    repoContextsPromise.delete(key);\n    repoContexts.set(key, repoContext);\n    return repoContext;\n  });\n};\n","import Webhooks from '@octokit/webhooks';\nimport { Context } from 'probot';\nimport { obtainRepoContext, RepoContext } from '../context/repoContext';\n\nexport type Handler<T = any> = (\n  context: Context<T>,\n  repoContext: RepoContext,\n) => Promise<void>;\n\nexport type CallbackWithRepoContext = (\n  repoContext: RepoContext,\n) => void | Promise<void>;\n\nexport const handlerPullRequestChange = async <\n  T extends Webhooks.WebhookPayloadPullRequest\n>(\n  context: Context<T>,\n  callback: CallbackWithRepoContext,\n): Promise<void> => {\n  const repoContext = await obtainRepoContext(context);\n  if (!repoContext) return;\n\n  repoContext.lockPROrPRS(String(context.payload.pull_request.id), async () => {\n    await callback(repoContext);\n  });\n};\n\ntype CallbackContextAndRepoContext<T> = (\n  context: Context<T>,\n  repoContext: RepoContext,\n) => void | Promise<void>;\n\nexport const createHandlerPullRequestChange = <\n  T extends Webhooks.WebhookPayloadPullRequest\n>(\n  callback: CallbackContextAndRepoContext<T>,\n) => (context: Context<T>) => {\n  return handlerPullRequestChange(context, (repoContext) =>\n    callback(context, repoContext),\n  );\n};\n\nexport const createHandlerPullRequestsChange = <T>(\n  getPullRequests: (context: Context<T>, repoContext: RepoContext) => any[],\n  callback: CallbackContextAndRepoContext<T>,\n) => async (context: Context<T>) => {\n  const repoContext = await obtainRepoContext(context);\n  if (!repoContext) return;\n\n  const prs = getPullRequests(context, repoContext);\n  if (prs.length === 0) return;\n  return repoContext.lockPROrPRS(prs.map((pr) => String(pr.id)), () =>\n    callback(context, repoContext),\n  );\n};\n","import Webhooks from '@octokit/webhooks';\nimport { Handler } from '../utils';\n\nexport const autoAssignPRToCreator: Handler<\n  Webhooks.WebhookPayloadPullRequest\n> = async (context, repoContext) => {\n  if (!repoContext.config.autoAssignToCreator) return;\n\n  const pr = context.payload.pull_request;\n  if (pr.assignees.length !== 0) return;\n  if (pr.user.type === 'Bot') return;\n\n  await context.github.issues.addAssignees(\n    context.issue({\n      assignees: [pr.user.login],\n    }),\n  );\n};\n","export const cleanTitle = (title: string): string =>\n  title\n    .trim()\n    .replace(/[\\s-]+\\[?\\s*(ONK-\\d+)\\s*]?\\s*$/, ' $1')\n    .replace(/^([A-Za-z]+)[/:]\\s*/, (s, arg1) => `${arg1.toLowerCase()}: `)\n    .replace(/^Revert \"([^\"]+)\"$/, 'revert: $1')\n    // eslint-disable-next-line unicorn/no-unsafe-regex\n    .replace(/^(revert:.*)(\\s+\\(#\\d+\\))$/, '$1');\n","import Webhooks from '@octokit/webhooks';\nimport { Context } from 'probot';\nimport { RepoContext } from '../../context/repoContext';\nimport { cleanTitle } from './utils/cleanTitle';\n\nexport const editOpenedPR = (\n  context: Context<Webhooks.WebhookPayloadPullRequest>,\n  repoContext: RepoContext,\n) => {\n  if (!repoContext.config.trimTitle) return;\n\n  const pr = context.payload.pull_request;\n  const title = cleanTitle(pr.title);\n\n  if (pr.title !== title) {\n    pr.title = title;\n    context.github.issues.update(\n      context.issue({\n        title,\n      }),\n    );\n  }\n};\n","import { Context } from 'probot';\nimport { RepoContext } from '../../context/repoContext';\nimport { StatusError, StatusInfo } from '../../teamconfigs/types';\n\ninterface StatusWithInfo {\n  name: string;\n  info: StatusInfo;\n  error?: undefined;\n}\n\ninterface StatusWithError {\n  name: string;\n  error: StatusError;\n  info?: undefined;\n}\n\ntype Status = StatusWithInfo | StatusWithError;\n\nconst ExcludesFalsy = (Boolean as any) as <T>(\n  x: T | false | null | undefined,\n) => x is T;\n\nexport const lintPR = async (\n  context: Context<any>,\n  repoContext: RepoContext,\n) => {\n  if (!repoContext.config.prLint) return;\n\n  const repo = context.payload.repository;\n  const pr = context.payload.pull_request;\n\n  // do not lint pr from forks\n  if (pr.head.repo.id !== repo.id) return;\n\n  const isPrFromBot = pr.user.type === 'Bot';\n\n  const statuses: Status[] = [];\n\n  const errorRule = repoContext.config.prLint.title.find((rule) => {\n    if (rule.bot === false && isPrFromBot) return false;\n\n    const match = rule.regExp.exec(pr.title);\n    if (match === null) {\n      if (rule.status) {\n        statuses.push({ name: rule.status, error: rule.error });\n      }\n      return true;\n    }\n\n    if (rule.status && rule.statusInfoFromMatch) {\n      statuses.push({\n        name: rule.status,\n        info: rule.statusInfoFromMatch(match),\n      });\n      return false;\n    }\n\n    return false;\n  });\n\n  const date = new Date().toISOString();\n\n  const hasLintPrCheck = (await context.github.checks.listForRef(\n    context.repo({\n      ref: pr.head.sha,\n    }),\n  )).data.check_runs.find(\n    (check) => check.name === `${process.env.NAME}/lint-pr`,\n  );\n\n  await Promise.all<any>(\n    [\n      ...statuses.map(({ name, error, info }) =>\n        context.github.repos.createStatus(\n          context.repo({\n            context: `${process.env.NAME}/${name}`,\n            sha: pr.head.sha,\n            state: (error ? 'failure' : 'success') as 'failure' | 'success',\n            target_url: error ? undefined : (info as StatusInfo).url,\n            description: error ? error.title : (info as StatusInfo).title,\n          }),\n        ),\n      ),\n      hasLintPrCheck &&\n        context.github.checks.create(\n          context.repo({\n            name: `${process.env.NAME}/lint-pr`,\n            head_sha: pr.head.sha,\n            status: 'completed' as 'completed',\n            conclusion: (errorRule ? 'failure' : 'success') as\n              | 'failure'\n              | 'success',\n            started_at: date,\n            completed_at: date,\n            output: errorRule\n              ? errorRule.error\n              : {\n                  title: '✓ Your PR is valid',\n                  summary: '',\n                },\n          }),\n        ),\n      !hasLintPrCheck &&\n        context.github.repos.createStatus(\n          context.repo({\n            context: `${process.env.NAME}/lint-pr`,\n            sha: pr.head.sha,\n            state: (errorRule ? 'failure' : 'success') as 'failure' | 'success',\n            target_url: undefined,\n            description: errorRule\n              ? errorRule.error.title\n              : '✓ Your PR is valid',\n          }),\n        ),\n    ].filter(ExcludesFalsy),\n  );\n};\n","import Webhooks from '@octokit/webhooks';\nimport { Context } from 'probot';\nimport { LabelResponse } from '../../context/initRepoLabels';\nimport { RepoContext } from '../../context/repoContext';\n\nconst addStatusCheck = async function<\n  E extends Webhooks.WebhookPayloadPullRequest\n>(\n  context: Context<E>,\n  pr: any,\n  { state, description }: { state: 'failure' | 'success'; description: string },\n): Promise<void> {\n  const hasPrCheck = (await context.github.checks.listForRef(\n    context.repo({\n      ref: pr.head.sha,\n    }),\n  )).data.check_runs.find((check) => check.name === process.env.NAME);\n\n  context.log.info('add status check', { hasPrCheck, state, description });\n\n  if (hasPrCheck) {\n    await context.github.checks.create(\n      context.repo({\n        name: process.env.NAME as string,\n        head_sha: pr.head.sha,\n        started_at: pr.created_at,\n        status: 'completed',\n        conclusion: state,\n        completed_at: new Date().toISOString(),\n        output: {\n          title: description,\n          summary: '',\n        },\n      }),\n    );\n  } else {\n    await context.github.repos.createStatus(\n      context.repo({\n        context: process.env.NAME,\n        sha: pr.head.sha,\n        state,\n        target_url: undefined,\n        description,\n      }),\n    );\n  }\n};\n\nconst createFailedStatusCheck = <E extends Webhooks.WebhookPayloadPullRequest>(\n  context: Context<E>,\n  pr: any,\n  description: string,\n): Promise<void> =>\n  addStatusCheck(context, pr, {\n    state: 'failure',\n    description,\n  });\n\nexport const updateStatusCheckFromLabels = (\n  context: Context<any>,\n  repoContext: RepoContext,\n  pr: any = context.payload.pull_request,\n  labels: LabelResponse[] = pr.labels || [],\n): Promise<void> => {\n  context.log.info('updateStatusCheckFromLabels', {\n    labels: labels.map((l) => l && l.name),\n    hasNeedsReview: repoContext.hasNeedsReview(labels),\n    hasApprovesReview: repoContext.hasApprovesReview(labels),\n  });\n\n  if (pr.requested_reviewers.length !== 0) {\n    return createFailedStatusCheck(\n      context,\n      pr,\n      `Awaiting review from: ${pr.requested_reviewers\n        .map((rr: any) => rr.login)\n        .join(', ')}`,\n    );\n  }\n\n  if (repoContext.hasChangesRequestedReview(labels)) {\n    return createFailedStatusCheck(\n      context,\n      pr,\n      'Changes requested ! Push commits or discuss changes then re-request a review.',\n    );\n  }\n\n  const needsReviewGroupNames = repoContext.getNeedsReviewGroupNames(labels);\n\n  if (needsReviewGroupNames.length !== 0) {\n    return createFailedStatusCheck(\n      context,\n      pr,\n      `Awaiting review from: ${needsReviewGroupNames.join(\n        ', ',\n      )}. Perhaps request someone ?`,\n    );\n  }\n\n  if (!repoContext.hasApprovesReview(labels)) {\n    if (repoContext.config.requiresReviewRequest) {\n      return createFailedStatusCheck(\n        context,\n        pr,\n        'Awaiting review... Perhaps request someone ?',\n      );\n    }\n  }\n\n  // if (\n  //   repoContext.config.requiresReviewRequest &&\n  //   !repoContext.hasRequestedReview(labels)\n  // ) {\n  //   return  createFailedStatusCheck(\n  //     context,\n  //     pr,\n  //     'You need to request someone to review the PR',\n  //   );\n  //   return;\n  // }\n  // return  createInProgressStatusCheck(context);\n  // } else if (repoContext.hasApprovesReview(labels)) {\n  return addStatusCheck(context, pr, {\n    state: 'success',\n    description: '✓ PR ready to merge !',\n  });\n  // }\n};\n","import Webhooks from '@octokit/webhooks';\nimport { Context } from 'probot';\nimport { LabelResponse } from '../../context/initRepoLabels';\nimport { GroupLabels } from '../../teamconfigs/types';\nimport { RepoContext } from '../../context/repoContext';\nimport { updateStatusCheckFromLabels } from './updateStatusCheckFromLabels';\n\nexport const updateReviewStatus = async <\n  E extends Webhooks.WebhookPayloadPullRequest,\n  GroupNames extends string = any\n>(\n  context: Context<E>,\n  repoContext: RepoContext,\n  reviewGroup: GroupNames,\n  {\n    add: labelsToAdd,\n    remove: labelsToRemove,\n  }: {\n    add?: (GroupLabels | false | undefined)[];\n    remove?: (GroupLabels | false | undefined)[];\n  },\n): Promise<LabelResponse[]> => {\n  context.log.info('updateReviewStatus', {\n    reviewGroup,\n    labelsToAdd,\n    labelsToRemove,\n  });\n\n  const pr = context.payload.pull_request;\n  let prLabels = pr.labels || [];\n  if (!reviewGroup) return prLabels;\n\n  const newLabelNames = new Set<string>(\n    prLabels.map((label: LabelResponse) => label.name),\n  );\n\n  const toAdd = new Set<GroupLabels>();\n  const toDelete = new Set<GroupLabels>();\n  const labels = repoContext.labels;\n\n  const getLabelFromKey = (key: GroupLabels): undefined | LabelResponse => {\n    const reviewConfig = repoContext.config.labels.review[reviewGroup];\n    if (!reviewConfig) return undefined;\n\n    return reviewConfig[key] && labels[reviewConfig[key]]\n      ? labels[reviewConfig[key]]\n      : undefined;\n  };\n\n  if (labelsToAdd) {\n    labelsToAdd.forEach((key) => {\n      if (!key) return;\n      const label = getLabelFromKey(key);\n      if (\n        !label ||\n        prLabels.some((prLabel: LabelResponse) => prLabel.id === label.id)\n      ) {\n        return;\n      }\n      newLabelNames.add(label.name);\n      toAdd.add(key);\n    });\n  }\n\n  if (labelsToRemove) {\n    labelsToRemove.forEach((key) => {\n      if (!key) return;\n      const label = getLabelFromKey(key);\n      if (!label) return;\n      const existing = prLabels.find(\n        (prLabel: LabelResponse) => prLabel.id === label.id,\n      );\n      if (existing) {\n        newLabelNames.delete(existing.name);\n        toDelete.add(key);\n      }\n    });\n  }\n\n  const newLabelNamesArray = [...newLabelNames];\n\n  context.log.info('updateReviewStatus', {\n    reviewGroup,\n    toAdd: [...toAdd],\n    toDelete: [...toDelete],\n    oldLabels: prLabels.map((l: LabelResponse) => l.name),\n    newLabelNames: newLabelNamesArray,\n  });\n\n  // if (process.env.DRY_RUN) return;\n\n  if (toAdd.size || toDelete.size) {\n    const result = await context.github.issues.replaceLabels(\n      context.issue({\n        labels: newLabelNamesArray,\n      }),\n    );\n    prLabels = result.data;\n  }\n\n  // if (toAdd.has('needsReview')) {\n  //   createInProgressStatusCheck(context);\n  // } else if (\n  //   toDelete.has('needsReview') ||\n  //   (prLabels.length === 0 && toAdd.size === 1 && toAdd.has('approved'))\n  // ) {\n  await updateStatusCheckFromLabels(context, repoContext, pr, prLabels);\n  // }\n\n  return prLabels;\n};\n","import { Application } from 'probot';\nimport { createHandlerPullRequestChange } from './utils';\nimport { autoAssignPRToCreator } from './actions/autoAssignPRToCreator';\nimport { editOpenedPR } from './actions/editOpenedPR';\nimport { lintPR } from './actions/lintPR';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\n\nexport default (app: Application) => {\n  app.on(\n    'pull_request.opened',\n    createHandlerPullRequestChange(async (context, repoContext) => {\n      await Promise.all([\n        autoAssignPRToCreator(context, repoContext),\n        editOpenedPR(context, repoContext),\n        lintPR(context, repoContext),\n        context.payload.pull_request.head.ref.startsWith('renovate/')\n          ? Promise.resolve(undefined)\n          : updateReviewStatus(context, repoContext, 'dev', {\n              add: ['needsReview'],\n            }),\n      ]);\n    }),\n  );\n};\n","import { Application } from 'probot';\nimport { createHandlerPullRequestChange } from './utils';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\n\nexport default (app: Application) => {\n  app.on(\n    'pull_request.closed',\n    createHandlerPullRequestChange(async (context, repoContext) => {\n      const pr = context.payload.pull_request;\n      if (pr.merged) {\n        const createMergeLockPrFromPr = () => ({\n          id: pr.id,\n          number: pr.number,\n          branch: pr.head.ref,\n        });\n        await Promise.all([\n          repoContext.removeMergeLockedPr(context, createMergeLockPrFromPr()),\n          // TODO delete branch\n        ]);\n      } else {\n        await Promise.all([\n          updateReviewStatus(context, repoContext, 'dev', {\n            remove: ['needsReview'],\n          }),\n        ]);\n      }\n    }),\n  );\n};\n","import { Application } from 'probot';\nimport { createHandlerPullRequestChange } from './utils';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\n\nexport default (app: Application) => {\n  app.on(\n    'pull_request.review_requested',\n    createHandlerPullRequestChange(async (context, repoContext) => {\n      const sender = context.payload.sender;\n\n      // ignore if sender is self (dismissed review rerequest review)\n      if (sender.type === 'Bot') return;\n\n      const pr = context.payload.pull_request;\n      const reviewer = (context.payload as any).requested_reviewer;\n\n      const reviewerGroup = repoContext.getReviewerGroup(reviewer.login);\n      const shouldWait = false;\n      // repoContext.reviewShouldWait(reviewerGroup, pr.requested_reviewers, { includesWaitForGroups: true });\n\n      if (reviewerGroup && repoContext.config.labels.review[reviewerGroup]) {\n        const { data: reviews } = await context.github.pulls.listReviews(\n          context.issue({ per_page: 50 }),\n        );\n        const hasChangesRequestedInReviews = reviews.some(\n          (review) =>\n            repoContext.getReviewerGroup(review.user.login) === reviewerGroup &&\n            review.state === 'REQUEST_CHANGES' &&\n            // In case this is a rerequest for review\n            review.user.login !== reviewer.login,\n        );\n\n        if (!hasChangesRequestedInReviews) {\n          await updateReviewStatus(context, repoContext, reviewerGroup, {\n            add: ['needsReview', !shouldWait && 'requested'],\n            remove: ['approved', 'changesRequested'],\n          });\n        }\n      }\n\n      if (sender.login === reviewer.login) return;\n\n      if (!shouldWait && repoContext.slack) {\n        repoContext.slack.postMessage(\n          reviewer.login,\n          `:eyes: ${repoContext.slack.mention(\n            sender.login,\n          )} requests your review on ${pr.html_url} !\\n> ${pr.title}`,\n        );\n      }\n    }),\n  );\n};\n","import { Application } from 'probot';\nimport { createHandlerPullRequestChange } from './utils';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\n\nexport default (app: Application) => {\n  app.on(\n    'pull_request.review_request_removed',\n    createHandlerPullRequestChange(async (context, repoContext) => {\n      const sender = context.payload.sender;\n      const pr = context.payload.pull_request;\n      const reviewer = (context.payload as any).requested_reviewer;\n\n      const reviewerGroup = repoContext.getReviewerGroup(reviewer.login);\n\n      if (reviewerGroup && repoContext.config.labels.review[reviewerGroup]) {\n        const hasRequestedReviewsForGroup = repoContext.reviewShouldWait(\n          reviewerGroup,\n          pr.requested_reviewers,\n          {\n            includesReviewerGroup: true,\n          },\n        );\n\n        const { data: reviews } = await context.github.pulls.listReviews(\n          context.issue({ per_page: 50 }),\n        );\n\n        const hasChangesRequestedInReviews = reviews.some(\n          (review) =>\n            repoContext.getReviewerGroup(review.user.login) === reviewerGroup &&\n            review.state === 'REQUEST_CHANGES',\n        );\n\n        const hasApprovedInReviews = reviews.some(\n          (review) =>\n            repoContext.getReviewerGroup(review.user.login) === reviewerGroup &&\n            review.state === 'APPROVED',\n        );\n\n        const approved =\n          !hasRequestedReviewsForGroup &&\n          !hasChangesRequestedInReviews &&\n          hasApprovedInReviews;\n        await updateReviewStatus(context, repoContext, reviewerGroup, {\n          add: [\n            // if changes requested by the one which requests was removed\n            hasChangesRequestedInReviews && 'changesRequested',\n            // if was already approved by another member in the group and has no other requests waiting\n            approved && 'approved',\n          ],\n          // remove labels if has no other requests waiting\n          remove: [\n            approved && 'needsReview',\n            !hasRequestedReviewsForGroup &&\n              !hasChangesRequestedInReviews &&\n              'requested',\n          ],\n        });\n      }\n\n      if (sender.login === reviewer.login) return;\n\n      if (repoContext.slack) {\n        repoContext.slack.postMessage(\n          reviewer.login,\n          `:skull_and_crossbones: ${repoContext.slack.mention(\n            sender.login,\n          )} removed the request for your review on ${pr.html_url}`,\n        );\n      }\n    }),\n  );\n};\n","import { Application } from 'probot';\nimport { createHandlerPullRequestChange } from './utils';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\n\nexport default (app: Application) => {\n  app.on(\n    'pull_request_review.submitted',\n    createHandlerPullRequestChange(async (context, repoContext) => {\n      const pr = context.payload.pull_request;\n      const { user: reviewer, state } = (context.payload as any).review;\n      if (pr.user.login === reviewer.login) return;\n\n      const reviewerGroup = repoContext.getReviewerGroup(reviewer.login);\n      let merged;\n\n      if (reviewerGroup && repoContext.config.labels.review[reviewerGroup]) {\n        const hasRequestedReviewsForGroup = repoContext.reviewShouldWait(\n          reviewerGroup,\n          pr.requested_reviewers,\n          {\n            includesReviewerGroup: true,\n            // TODO reenable this when accepted can notify request review to slack (dev accepted => design requested) and flag to disable for label (approved design ; still waiting for dev ?)\n            // includesWaitForGroups: true,\n          },\n        );\n        const { data: reviews } = await context.github.pulls.listReviews(\n          context.issue({ per_page: 50 }),\n        );\n        const hasChangesRequestedInReviews = reviews.some(\n          (review) =>\n            repoContext.getReviewerGroup(review.user.login) === reviewerGroup &&\n            review.state === 'REQUEST_CHANGES',\n        );\n\n        const approved =\n          !hasRequestedReviewsForGroup &&\n          !hasChangesRequestedInReviews &&\n          state === 'approved';\n\n        const newLabels = await updateReviewStatus(\n          context,\n          repoContext,\n          reviewerGroup,\n          {\n            add: [\n              approved && 'approved',\n              state === 'changes_requested' && 'changesRequested',\n            ],\n            remove: [\n              approved && 'needsReview',\n              !(hasRequestedReviewsForGroup || state === 'changes_requested') &&\n                'requested',\n              state === 'approved' &&\n                !hasChangesRequestedInReviews &&\n                'changesRequested',\n              state === 'changes_requested' && 'approved',\n            ],\n          },\n        );\n\n        if (approved && !hasChangesRequestedInReviews) {\n          merged = await autoMergeIfPossible(\n            context,\n            repoContext,\n            pr,\n            newLabels,\n          );\n        }\n      }\n\n      const mention = repoContext.slack.mention(reviewer.login);\n      const prUrl = pr.html_url;\n\n      const message = (() => {\n        if (state === 'changes_requested') {\n          return `:x: ${mention} requests changes on ${prUrl}`;\n        }\n        if (state === 'approved') {\n          return `:clap: :white_check_mark: ${mention} approves ${prUrl}${\n            merged ? ' and PR is merged :tada:' : ''\n          }`;\n        }\n        return `:speech_balloon: ${mention} commented on ${prUrl}`;\n      })();\n\n      repoContext.slack.postMessage(pr.user.login, message);\n    }),\n  );\n};\n","import { Application } from 'probot';\nimport { createHandlerPullRequestChange } from './utils';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\n\nexport default (app: Application) => {\n  app.on(\n    'pull_request_review.dismissed',\n    createHandlerPullRequestChange(async (context, repoContext) => {\n      const sender = context.payload.sender;\n      const pr = context.payload.pull_request;\n      const reviewer = (context.payload as any).review.user;\n\n      const reviewerGroup = repoContext.getReviewerGroup(reviewer.login);\n\n      if (reviewerGroup && repoContext.config.labels.review[reviewerGroup]) {\n        const { data: reviews } = await context.github.pulls.listReviews(\n          context.issue({ per_page: 50 }),\n        );\n        const hasChangesRequestedInReviews = reviews.some(\n          (review) =>\n            repoContext.getReviewerGroup(review.user.login) === reviewerGroup &&\n            review.state === 'REQUEST_CHANGES',\n        );\n\n        await updateReviewStatus(context, repoContext, reviewerGroup, {\n          add: ['needsReview', 'requested'],\n          remove: [\n            !hasChangesRequestedInReviews && 'changesRequested',\n            'approved',\n          ],\n        });\n      }\n\n      if (repoContext.slack) {\n        if (sender.login === reviewer.login) {\n          repoContext.slack.postMessage(\n            pr.user.login,\n            `:skull: ${repoContext.slack.mention(\n              reviewer.login,\n            )} dismissed his review on ${pr.html_url}`,\n          );\n        } else {\n          repoContext.slack.postMessage(\n            reviewer.login,\n            `:skull: ${repoContext.slack.mention(\n              sender.login,\n            )} dismissed your review on ${pr.html_url}`,\n          );\n        }\n      }\n    }),\n  );\n};\n","import { Application } from 'probot';\nimport { createHandlerPullRequestChange } from './utils';\nimport { editOpenedPR } from './actions/editOpenedPR';\nimport { lintPR } from './actions/lintPR';\nimport { updateStatusCheckFromLabels } from './actions/updateStatusCheckFromLabels';\n\nexport default (app: Application) => {\n  app.on(\n    'pull_request.synchronize',\n    createHandlerPullRequestChange(async (context, repoContext) => {\n      // old and new sha\n      // const { before, after } = context.payload;\n\n      await Promise.all([\n        editOpenedPR(context, repoContext),\n        lintPR(context, repoContext),\n        // addStatusCheckToLatestCommit\n        updateStatusCheckFromLabels(context, repoContext),\n      ]);\n    }),\n  );\n};\n","import { Application } from 'probot';\nimport { lintPR } from './actions/lintPR';\nimport { editOpenedPR } from './actions/editOpenedPR';\nimport { createHandlerPullRequestChange } from './utils';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\n\nexport default (app: Application) => {\n  app.on(\n    'pull_request.edited',\n    createHandlerPullRequestChange(async (context, repoContext) => {\n      await Promise.all([\n        editOpenedPR(context, repoContext),\n        lintPR(context, repoContext),\n      ]);\n\n      await autoMergeIfPossible(context, repoContext);\n    }),\n  );\n};\n","import { Application } from 'probot';\nimport { handlerPullRequestChange } from './utils';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { updateStatusCheckFromLabels } from './actions/updateStatusCheckFromLabels';\n\nexport default (app: Application) => {\n  app.on(\n    ['pull_request.labeled', 'pull_request.unlabeled'],\n    async (context) => {\n      const sender = context.payload.sender;\n      if (sender.type === 'Bot') return;\n\n      await handlerPullRequestChange(context, async (repoContext) => {\n        const label = context.payload.label;\n        if (repoContext.protectedLabelIds.includes(label.id)) {\n          if (context.payload.action === 'labeled') {\n            await context.github.issues.removeLabel(\n              context.issue({ name: label.name }),\n            );\n          } else {\n            await context.github.issues.addLabels(\n              context.issue({ labels: [label.name] }),\n            );\n          }\n          return;\n        }\n\n        await updateStatusCheckFromLabels(context, repoContext);\n\n        if (\n          context.payload.action === 'labeled' &&\n          label.id ===\n            (repoContext.labels['merge/automerge'] &&\n              repoContext.labels['merge/automerge'].id)\n        ) {\n          await autoMergeIfPossible(context, repoContext);\n        }\n      });\n    },\n  );\n};\n","import { Application } from 'probot';\nimport { createHandlerPullRequestsChange } from './utils';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\n\nexport default (app: Application) => {\n  app.on(\n    'check_run.completed',\n    createHandlerPullRequestsChange(\n      (context) => context.payload.check_run.pull_requests,\n      async (context, repoContext) => {\n        await Promise.all(\n          context.payload.check_run.pull_requests.map((pr) =>\n            context.github.pulls\n              .get(\n                context.repo({\n                  number: pr.number,\n                }),\n              )\n              .then((prResult) => {\n                return autoMergeIfPossible(context, repoContext, prResult.data);\n              }),\n          ),\n        );\n      },\n    ),\n  );\n};\n","import { Application } from 'probot';\nimport { createHandlerPullRequestsChange } from './utils';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\n\nexport default (app: Application) => {\n  app.on(\n    'check_suite.completed',\n    createHandlerPullRequestsChange(\n      (context) => context.payload.check_suite.pull_requests,\n      async (context, repoContext) => {\n        await Promise.all(\n          context.payload.check_suite.pull_requests.map((pr) =>\n            context.github.pulls\n              .get(\n                context.repo({\n                  number: pr.number,\n                }),\n              )\n              .then((prResult) => {\n                return autoMergeIfPossible(context, repoContext, prResult.data);\n              }),\n          ),\n        );\n      },\n    ),\n  );\n};\n","import Webhooks from '@octokit/webhooks';\nimport { Application, Context } from 'probot';\nimport { LockedMergePr } from '../context/repoContext';\nimport { createHandlerPullRequestsChange } from './utils';\n\nconst isSameBranch = (\n  context: Context<Webhooks.WebhookPayloadStatus>,\n  lockedPr: LockedMergePr,\n) => {\n  if (!lockedPr) return false;\n  return context.payload.branches.find((b) => b.name === lockedPr.branch);\n};\n\nexport default (app: Application) => {\n  app.on(\n    'status',\n    createHandlerPullRequestsChange(\n      (context, repoContext) => {\n        const lockedPr = repoContext.getMergeLockedPr();\n        if (!lockedPr) return [];\n\n        if (isSameBranch(context, lockedPr)) {\n          return [lockedPr];\n        }\n\n        return [];\n      },\n      (context, repoContext) => {\n        const lockedPr = repoContext.getMergeLockedPr();\n        // check if changed\n        if (isSameBranch(context, lockedPr)) {\n          repoContext.reschedule(context, lockedPr);\n        }\n      },\n    ),\n  );\n};\n","import 'dotenv/config';\nimport { Probot, Application } from 'probot';\nimport openedHandler from './pr-handlers/opened';\nimport closedHandler from './pr-handlers/closed';\nimport reviewRequestedHandler from './pr-handlers/reviewRequested';\nimport reviewRequestRemovedHandler from './pr-handlers/reviewRequestRemoved';\nimport reviewSubmittedHandler from './pr-handlers/reviewSubmitted';\nimport reviewDismissedHandler from './pr-handlers/reviewDismissed';\nimport synchromizeHandler from './pr-handlers/synchronize';\nimport editedHandler from './pr-handlers/edited';\nimport labelsChanged from './pr-handlers/labelsChanged';\nimport checkrunCompleted from './pr-handlers/checkrunCompleted';\nimport checksuiteCompleted from './pr-handlers/checksuiteCompleted';\nimport status from './pr-handlers/status';\n\nif (!process.env.NAME) process.env.NAME = 'reviewflow';\n\n// const getConfig = require('probot-config')\n// const { MongoClient } = require('mongodb');\n\n// const connect = MongoClient.connect(process.env.MONGO_URL);\n// const db = connect.then(client => client.db(process.env.MONGO_DB));\n\n// let config = await getConfig(context, 'reviewflow.yml');\n\n// eslint-disable-next-line import/no-commonjs\nProbot.run((app: Application) => {\n  openedHandler(app);\n  closedHandler(app);\n  reviewRequestedHandler(app);\n  reviewRequestRemovedHandler(app);\n\n  // app.on('pull_request.closed', async context => {\n\n  // });\n\n  // app.on('pull_request.reopened', async context => {\n\n  // });\n\n  reviewSubmittedHandler(app);\n  reviewDismissedHandler(app);\n  labelsChanged(app);\n  synchromizeHandler(app);\n  editedHandler(app);\n\n  checkrunCompleted(app);\n  checksuiteCompleted(app);\n  status(app);\n});\n"],"names":["config","slackToken","process","env","ORNIKAR_SLACK_TOKEN","autoAssignToCreator","trimTitle","requiresReviewRequest","prLint","title","regExp","error","summary","bot","status","statusInfoFromMatch","match","issue","url","groups","dev","abarreir","ORNIKAR_EMAIL_DOMAIN","christophehurpeau","arthurflachs","skyline42sh","LentnerStefan","HugoGarrido","CorentinAndre","rigma","Mxime","damienorny","tilap","design","jperriere","CoralineColasse","waitForGroups","labels","list","name","color","review","ci","inProgress","succeeded","failed","needsReview","requested","changesRequested","approved","teamConfigs","ornikar","autoMergeIfPossible","context","repoContext","pr","payload","pull_request","prLabels","autoMergeLabel","createMergeLockPrFromPr","id","number","branch","head","ref","find","l","log","debug","removeMergeLockedPr","hasNeedsReview","hasRequestedReview","lockedPr","getMergeLockedPr","info","pushAutomergeQueue","addMergeLockPr","mergeable","undefined","prResult","github","pulls","get","repo","data","merged","mergeable_state","reschedule","startsWith","issues","update","body","replace","checks","listForRef","sha","per_page","hasFailedChecks","check_runs","some","check","conclusion","statuses","repos","listStatusesForRef","hasFailedStatuses","state","merge","owner","login","base","mergeResult","merge_method","commit_title","commit_message","Boolean","err","message","initRepoLabels","listLabelsForRepo","finalLabels","labelKey","labelConfig","Object","entries","labelColor","slice","description","existingLabel","label","result","createLabel","current_name","updateLabel","getKeys","o","keys","ExcludesFalsy","initTeamSlack","mention","postMessage","Promise","resolve","githubLoginToSlackEmail","reduce","acc","groupName","assign","slackClient","WebClient","allUsers","users","limit","members","values","map","email","member","user","profile","console","warn","im","filter","open","channel","membersMap","Map","getUserFromGithubLogin","githubLogin","text","DRY_RUN","chat","initTeamContext","slackPromise","githubLoginToGroup","forEach","set","getReviewerGroups","githubLogins","Set","getReviewerGroup","reviewShouldWait","reviewerGroup","requestedReviewers","includesReviewerGroup","includesWaitForGroups","requestedReviewerGroups","request","includes","group","slack","teamContextsPromise","teamContexts","obtainTeamContext","repository","existingTeamContext","existingPromise","promise","then","teamContext","delete","initRepoContext","create","all","reviewGroupNames","needsReviewLabelIds","key","requestedReviewLabelIds","changesRequestedLabelIds","approvedReviewLabelIds","labelIdToGroupName","reviewGroupLabels","lock","Lock","lockMergePr","automergeQueue","lockPROrPRS","prIdOrIds","callback","reject","createReleaseCallback","release","Error","setTimeout","String","protectedLabelIds","hasChangesRequestedReview","hasApprovesReview","getNeedsReviewGroupNames","shift","p","push","repoContextsPromise","repoContexts","obtainRepoContext","existingRepoContext","handlerPullRequestChange","createHandlerPullRequestChange","createHandlerPullRequestsChange","getPullRequests","prs","length","autoAssignPRToCreator","assignees","type","addAssignees","cleanTitle","trim","s","arg1","toLowerCase","editOpenedPR","lintPR","isPrFromBot","errorRule","rule","exec","date","Date","toISOString","hasLintPrCheck","NAME","createStatus","target_url","head_sha","started_at","completed_at","output","addStatusCheck","hasPrCheck","created_at","createFailedStatusCheck","updateStatusCheckFromLabels","requested_reviewers","rr","join","needsReviewGroupNames","updateReviewStatus","reviewGroup","add","labelsToAdd","remove","labelsToRemove","newLabelNames","toAdd","toDelete","getLabelFromKey","reviewConfig","prLabel","existing","newLabelNamesArray","oldLabels","size","replaceLabels","app","on","sender","reviewer","requested_reviewer","reviews","listReviews","hasChangesRequestedInReviews","html_url","hasRequestedReviewsForGroup","hasApprovedInReviews","newLabels","prUrl","action","removeLabel","addLabels","check_run","pull_requests","check_suite","isSameBranch","branches","b","Probot","run","openedHandler","closedHandler","reviewRequestedHandler","reviewRequestRemovedHandler","reviewSubmittedHandler","reviewDismissedHandler","labelsChanged","synchromizeHandler","editedHandler","checkrunCompleted","checksuiteCompleted"],"mappings":"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"}