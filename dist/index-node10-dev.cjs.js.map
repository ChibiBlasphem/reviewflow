{"version":3,"file":"index-node10-dev.cjs.js","sources":["../src/teamconfigs/ornikar.ts","../src/teamconfigs/christophehurpeau.ts","../src/teamconfigs/index.ts","../src/pr-handlers/actions/utils/prOptions.ts","../src/pr-handlers/actions/utils/parseBody.ts","../src/pr-handlers/actions/autoMergeIfPossible.ts","../src/context/initRepoLabels.ts","../src/context/utils.ts","../src/context/initTeamSlack.ts","../src/context/teamContext.ts","../src/context/repoContext.ts","../src/pr-handlers/utils.ts","../src/pr-handlers/actions/autoAssignPRToCreator.ts","../src/pr-handlers/actions/utils/cleanTitle.ts","../src/pr-handlers/actions/utils/updateBody.ts","../src/pr-handlers/actions/editOpenedPR.ts","../src/pr-handlers/actions/updateStatusCheckFromLabels.ts","../src/pr-handlers/actions/updateReviewStatus.ts","../src/pr-handlers/actions/autoApproveAndAutoMerge.ts","../src/pr-handlers/opened.ts","../src/pr-handlers/closed.ts","../src/pr-handlers/reviewRequested.ts","../src/pr-handlers/reviewRequestRemoved.ts","../src/pr-handlers/reviewSubmitted.ts","../src/pr-handlers/reviewDismissed.ts","../src/pr-handlers/synchronize.ts","../src/pr-handlers/edited.ts","../src/pr-handlers/labelsChanged.ts","../src/pr-handlers/checkrunCompleted.ts","../src/pr-handlers/checksuiteCompleted.ts","../src/pr-handlers/status.ts","../src/index.ts"],"sourcesContent":["import { Config } from './types';\n\nconst config: Config<'dev' | 'design'> = {\n  slackToken: process.env.ORNIKAR_SLACK_TOKEN,\n  autoAssignToCreator: true,\n  trimTitle: true,\n  requiresReviewRequest: true,\n  prDefaultOptions: {\n    featureBranch: false,\n    deleteAfterMerge: true,\n  },\n  parsePR: {\n    title: [\n      {\n        regExp:\n          // eslint-disable-next-line unicorn/no-unsafe-regex\n          /^(revert: )?(build|chore|ci|docs|feat|fix|perf|refactor|style|test)(\\(([a-z\\-/]*)\\))?:\\s/,\n        error: {\n          title: 'Title does not match commitlint conventional',\n          summary:\n            'https://github.com/marionebl/commitlint/tree/master/%40commitlint/config-conventional',\n        },\n      },\n      {\n        bot: false,\n        regExp: /\\s(ONK-(\\d+)|\\[no issue])$/,\n        error: {\n          title: 'Title does not have JIRA issue',\n          summary: 'The PR title should end with ONK-0000, or [no issue]',\n        },\n      },\n    ],\n  },\n\n  groups: {\n    dev: {\n      /* back */\n      abarreir: `alexandre${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      arthurflachs: `arthur${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      CorentinAndre: `corentin${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      rigma: `romain${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      damienorny: `damien.orny${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      'Thierry-girod': `thierry${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      darame07: `kevin${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      Pixy: `pierre-alexis${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      /* front */\n      christophehurpeau: `christophe${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      HugoGarrido: `hugo${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      LentnerStefan: `stefan${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      Mxime: `maxime${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      tilap: `julien.lavinh${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      '63m29': `valerian${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n    },\n    design: {\n      jperriere: `julien${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      CoralineColasse: `coraline${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n    },\n  },\n  waitForGroups: {\n    dev: [],\n    design: ['dev'],\n  },\n  labels: {\n    list: {\n      // /* ci */\n      // 'ci/in-progress': { name: ':green_heart: ci/in-progress', color: '#0052cc' },\n      // 'ci/fail': { name: ':green_heart: ci/fail', color: '#e11d21' },\n      // 'ci/passed': { name: ':green_heart: ci/passed', color: '#86f9b4' },\n\n      /* code */\n      'code/needs-review': {\n        name: ':ok_hand: code/needs-review',\n        color: '#FFC44C',\n      },\n      'code/review-requested': {\n        name: ':ok_hand: code/review-requested',\n        color: '#DAE1E6',\n      },\n      'code/changes-requested': {\n        name: ':ok_hand: code/changes-requested',\n        color: '#e11d21',\n      },\n      'code/approved': {\n        name: ':ok_hand: code/approved',\n        color: '#64DD17',\n      },\n\n      /* design */\n      'design/needs-review': {\n        name: ':art: design/needs-review',\n        color: '#FFC44C',\n      },\n      'design/review-requested': {\n        name: ':art: design/review-requested',\n        color: '#DAE1E6',\n      },\n      'design/changes-requested': {\n        name: ':art: design/changes-requested',\n        color: '#e11d21',\n      },\n      'design/approved': {\n        name: ':art: design/approved',\n        color: '#64DD17',\n      },\n\n      /* auto merge */\n      'merge/automerge': {\n        name: ':soon: automerge',\n        color: '#64DD17',\n      },\n\n      /* feature-branch */\n      'feature-branch': {\n        name: 'feature-branch',\n        color: '#7FCEFF',\n      },\n    },\n\n    review: {\n      ci: {\n        inProgress: 'ci/in-progress',\n        succeeded: 'ci/success',\n        failed: 'ci/fail',\n      },\n      dev: {\n        needsReview: 'code/needs-review',\n        requested: 'code/review-requested',\n        changesRequested: 'code/changes-requested',\n        approved: 'code/approved',\n      },\n      design: {\n        needsReview: 'design/needs-review',\n        requested: 'design/review-requested',\n        changesRequested: 'design/changes-requested',\n        approved: 'design/approved',\n      },\n    },\n  },\n};\n\nexport default config;\n","import { Config } from './types';\n\nconst config: Config<'dev'> = {\n  autoAssignToCreator: true,\n  trimTitle: true,\n  requiresReviewRequest: false,\n  prDefaultOptions: {\n    featureBranch: false,\n    deleteAfterMerge: true,\n  },\n  parsePR: {\n    title: [\n      {\n        regExp:\n          // eslint-disable-next-line unicorn/no-unsafe-regex\n          /^(revert: )?(build|chore|ci|docs|feat|fix|perf|refactor|style|test)(\\(([a-z\\-/]*)\\))?:\\s/,\n        error: {\n          title: 'Title does not match commitlint conventional',\n          summary:\n            'https://github.com/marionebl/commitlint/tree/master/%40commitlint/config-conventional',\n        },\n      },\n    ],\n  },\n  groups: {\n    dev: {\n      christophehurpeau: 'christophe@hurpeau.com',\n      'chris-reviewflow': 'christophe.hurpeau+reviewflow@gmail.com',\n      tilap: 'jlavinh@gmail.com',\n    },\n  },\n  waitForGroups: {\n    dev: [],\n  },\n  labels: {\n    list: {\n      // /* ci */\n      // 'ci/in-progress': { name: ':green_heart: ci/in-progress', color: '#0052cc' },\n      // 'ci/fail': { name: ':green_heart: ci/fail', color: '#e11d21' },\n      // 'ci/passed': { name: ':green_heart: ci/passed', color: '#86f9b4' },\n\n      /* code */\n      'code/needs-review': {\n        name: ':ok_hand: code/needs-review',\n        color: '#FFD57F',\n      },\n      'code/review-requested': {\n        name: ':ok_hand: code/review-requested',\n        color: '#B2E1FF',\n      },\n      'code/changes-requested': {\n        name: ':ok_hand: code/changes-requested',\n        color: '#e11d21',\n      },\n      'code/approved': {\n        name: ':ok_hand: code/approved',\n        color: '#64DD17',\n      },\n\n      /* auto merge */\n      'merge/automerge': {\n        name: ':soon: automerge',\n        color: '#64DD17',\n      },\n\n      /* feature-branch */\n      'feature-branch': {\n        name: 'feature-branch',\n        color: '#7FCEFF',\n      },\n    },\n\n    review: {\n      ci: {\n        inProgress: 'ci/in-progress',\n        succeeded: 'ci/success',\n        failed: 'ci/fail',\n      },\n      dev: {\n        needsReview: 'code/needs-review',\n        requested: 'code/review-requested',\n        changesRequested: 'code/changes-requested',\n        approved: 'code/approved',\n      },\n    },\n  },\n};\n\nexport default config;\n","import { Config as ConfigType } from './types';\nimport ornikar from './ornikar';\nimport christophehurpeau from './christophehurpeau';\n\nexport type Config<GroupNames extends string = any> = ConfigType<GroupNames>;\n\nexport const teamConfigs: { [owner: string]: Config } = {\n  ornikar,\n  christophehurpeau,\n};\n\n// flat requires node 11\n// export const getMembers = <GroupNames extends string = any>(\n//   groups: Record<GroupNames, Group>,\n// ): string[] => {\n//   return Object.values(groups).flat(1);\n// };\n","export type Options = 'featureBranch' | 'deleteAfterMerge';\n\nexport const options: Options[] = ['featureBranch', 'deleteAfterMerge'];\nexport const optionsRegexps: { name: Options; regexp: RegExp }[] = options.map(\n  (option) => ({\n    name: option,\n    regexp: new RegExp(`\\\\[([ xX]?)]\\\\s*<!-- reviewflow-${option} -->`),\n  }),\n);\n\nexport const optionsLabels: { name: Options; label: string }[] = [\n  { name: 'featureBranch', label: 'This PR is a feature branch' },\n  {\n    name: 'deleteAfterMerge',\n    label: 'Automatic branch delete after this PR is merged',\n  },\n];\n","import { Options, optionsRegexps } from './prOptions';\n\nconst commentStart = '<!-- do not edit after this -->';\nconst commentEnd = \"<!-- end - don't add anything after this -->\";\n\nconst regexpCols = /^(.*)(<!---? do not edit after this -?-->.*<!---? end - don't add anything after this -?-->).*$/is;\nconst regexpReviewflowCol = /^(\\s*<!---? do not edit after this -?--><\\/td><td [^>]*>)\\s*(.*)\\s*(<\\/td><\\/tr><\\/table>\\s*<!---? end - don't add anything after this -?-->)\\s*$/is;\n\nconst parseOptions = (\n  content: string,\n  defaultConfig: Record<Options, boolean>,\n): Record<Options, boolean> => {\n  return optionsRegexps.reduce(\n    (acc, { name, regexp }) => {\n      const match = regexp.exec(content);\n      acc[name] = !match\n        ? defaultConfig[name] || false\n        : match[1] === 'x' || match[1] === 'X';\n      return acc;\n    },\n    {} as any,\n  ) as Record<Options, boolean>;\n};\n\nexport const parseBody = (\n  description: string,\n  defaultConfig: Record<Options, boolean>,\n) => {\n  const match = regexpCols.exec(description);\n  if (!match) return null;\n  const [, content, reviewFlowCol] = match;\n  const reviewFlowColMatch = regexpReviewflowCol.exec(reviewFlowCol);\n  if (!reviewFlowColMatch) {\n    return {\n      content,\n      reviewflowContentColPrefix: commentStart,\n      reviewflowContentColSuffix: commentEnd,\n      options: parseOptions(reviewFlowCol, defaultConfig),\n    };\n  }\n  const [\n    ,\n    reviewflowContentColPrefix,\n    reviewflowContentCol,\n    reviewflowContentColSuffix,\n  ] = reviewFlowColMatch;\n\n  return {\n    content,\n    reviewflowContentColPrefix,\n    reviewflowContentColSuffix,\n    options: parseOptions(reviewflowContentCol, defaultConfig),\n  };\n};\n","/* eslint-disable max-lines */\nimport { Context } from 'probot';\n// eslint-disable-next-line import/no-cycle\nimport { RepoContext } from '../../context/repoContext';\nimport { LabelResponse } from '../../context/initRepoLabels';\nimport { parseBody } from './utils/parseBody';\n\nconst hasFailedStatusOrChecks = async (\n  context: Context<any>,\n  repoContext: RepoContext,\n  pr: any,\n) => {\n  const checks = await context.github.checks.listForRef(\n    context.repo({\n      ref: pr.head.sha,\n      per_page: 100,\n    }),\n  );\n\n  const failedChecks = checks.data.check_runs.filter(\n    (check) => check.conclusion === 'failure',\n  );\n\n  if (failedChecks.length !== 0) {\n    context.log.info(`automerge not possible: failed check pr ${pr.id}`, {\n      checks: failedChecks.map((check) => check.name),\n    });\n    return true;\n  }\n\n  const combinedStatus = await context.github.repos.getCombinedStatusForRef(\n    context.repo({\n      ref: pr.head.sha,\n      per_page: 100,\n    }),\n  );\n\n  if (combinedStatus.data.state === 'failure') {\n    const failedStatuses = combinedStatus.data.statuses.filter(\n      (status) => status.state === 'failure' || status.state === 'error',\n    );\n\n    context.log.info(`automerge not possible: failed status pr ${pr.id}`, {\n      statuses: failedStatuses.map((status) => status.context),\n    });\n\n    return true;\n  }\n\n  return false;\n};\n\nexport const autoMergeIfPossible = async (\n  context: Context<any>,\n  repoContext: RepoContext,\n  pr: any = context.payload.pull_request,\n  prLabels: LabelResponse[] = pr.labels,\n): Promise<boolean> => {\n  const autoMergeLabel = repoContext.labels['merge/automerge'];\n  if (!autoMergeLabel) return false;\n\n  const createMergeLockPrFromPr = () => ({\n    id: pr.id,\n    number: pr.number,\n    branch: pr.head.ref,\n  });\n\n  if (!prLabels.find((l): boolean => l.id === autoMergeLabel.id)) {\n    context.log.debug('automerge not possible: no label');\n    repoContext.removeMergeLockedPr(context, createMergeLockPrFromPr());\n    return false;\n  }\n\n  if (\n    repoContext.hasNeedsReview(prLabels) ||\n    repoContext.hasRequestedReview(prLabels)\n  ) {\n    context.log.debug('automerge not possible: blocking labels');\n    // repoContext.removeMergeLockedPr(context, createMergeLockPrFromPr());\n    return false;\n  }\n\n  const lockedPr = repoContext.getMergeLockedPr();\n  if (lockedPr && lockedPr.number !== pr.number) {\n    context.log.info(`automerge not possible: locked pr ${pr.id}`);\n    repoContext.pushAutomergeQueue(createMergeLockPrFromPr());\n    return false;\n  }\n\n  repoContext.addMergeLockPr(createMergeLockPrFromPr());\n\n  if (pr.mergeable === undefined) {\n    const prResult = await context.github.pulls.get(\n      context.repo({\n        pull_number: pr.number,\n      }),\n    );\n    pr = prResult.data;\n  }\n\n  if (pr.merged) {\n    repoContext.removeMergeLockedPr(context, createMergeLockPrFromPr());\n    context.log.info(`automerge not possible: already merged pr ${pr.id}`);\n    return false;\n  }\n\n  context.log.info(\n    `automerge?: ${pr.id}, mergeable=${pr.mergeable} state=${\n      pr.mergeable_state\n    }`,\n  );\n\n  // https://github.com/octokit/octokit.net/issues/1763\n  if (\n    !(\n      pr.mergeable_state === 'clean' ||\n      pr.mergeable_state === 'has_hooks' ||\n      pr.mergeable_state === 'unstable'\n    )\n  ) {\n    if (!pr.mergeable_state || pr.mergeable_state === 'unknown') {\n      context.log.info(`automerge not possible: rescheduling ${pr.id}`);\n      // GitHub is determining whether the pull request is mergeable\n      repoContext.reschedule(context, createMergeLockPrFromPr());\n      return false;\n    }\n\n    if (pr.head.ref.startsWith('renovate/')) {\n      if (pr.mergeable_state === 'behind' || pr.mergeable_state === 'dirty') {\n        context.log.info(\n          `automerge not possible: rebase renovate branch pr ${pr.id}`,\n        );\n        // TODO check if has commits not made by renovate https://github.com/ornikar/shared-configs/pull/47#issuecomment-445767120\n\n        await context.github.issues.update(\n          context.repo({\n            number: pr.number,\n            body: pr.body.replace(\n              '[ ] <!-- renovate-rebase -->',\n              '[x] <!-- renovate-rebase -->',\n            ),\n          }),\n        );\n        return false;\n      }\n\n      if (await hasFailedStatusOrChecks(context, repoContext, pr)) {\n        repoContext.removeMergeLockedPr(context, createMergeLockPrFromPr());\n        return false;\n      } else if (pr.mergeable_state === 'blocked') {\n        // waiting for reschedule in status (pr-handler/status.ts)\n        return false;\n      }\n\n      context.log.info(\n        `automerge not possible: renovate with mergeable_state=${\n          pr.mergeable_state\n        }`,\n      );\n      return false;\n    }\n\n    if (pr.mergeable_state === 'blocked') {\n      if (await hasFailedStatusOrChecks(context, repoContext, pr)) {\n        repoContext.removeMergeLockedPr(context, createMergeLockPrFromPr());\n        return false;\n      } else {\n        // waiting for reschedule in status (pr-handler/status.ts)\n        return false;\n      }\n    }\n\n    if (pr.mergeable_state === 'behind') {\n      context.log.info('automerge not possible: update branch', {\n        head: pr.head.ref,\n        base: pr.base.ref,\n      });\n\n      await context.github.repos.merge({\n        owner: pr.head.repo.owner.login,\n        repo: pr.head.repo.name,\n        head: pr.base.ref,\n        base: pr.head.ref,\n      });\n\n      return false;\n    }\n\n    repoContext.removeMergeLockedPr(context, createMergeLockPrFromPr());\n    context.log.info(\n      `automerge not possible: not mergeable mergeable_state=${\n        pr.mergeable_state\n      }`,\n    );\n    return false;\n  }\n\n  try {\n    context.log.info(`automerge pr #${pr.number}`);\n    const parsedBody = parseBody(pr.body, repoContext.config.prDefaultOptions);\n    const mergeResult = await context.github.pulls.merge({\n      merge_method:\n        parsedBody && parsedBody.options.featureBranch ? 'merge' : 'squash',\n      owner: pr.head.repo.owner.login,\n      repo: pr.head.repo.name,\n      pull_number: pr.number,\n      commit_title: `${pr.title} (#${pr.number})`,\n      commit_message: '', // TODO add BC\n    });\n    context.log.debug('merge result:', mergeResult.data);\n    repoContext.removeMergeLockedPr(context, createMergeLockPrFromPr());\n    return Boolean(mergeResult.data.merged);\n  } catch (err) {\n    context.log.info('could not merge:', err.message);\n    repoContext.reschedule(context, createMergeLockPrFromPr());\n    return false;\n  }\n};\n","import { Context } from 'probot';\nimport { Config } from '../teamconfigs';\n\nexport interface LabelResponse {\n  id: number;\n  node_id: string;\n  url: string;\n  name: string;\n  description: string;\n  color: string;\n  default: boolean;\n}\n\nexport interface Labels {\n  [key: string]: LabelResponse;\n}\n\nexport const initRepoLabels = async <GroupNames extends string>(\n  context: Context<any>,\n  config: Config<GroupNames>,\n): Promise<Labels> => {\n  const { data: labels } = await context.github.issues.listLabelsForRepo(\n    context.repo({ per_page: 100 }),\n  );\n  const finalLabels: Record<string, LabelResponse> = {};\n\n  for (const [labelKey, labelConfig] of Object.entries(config.labels.list)) {\n    const labelColor = labelConfig.color.slice(1);\n    const description = `Generated by review-flow for ${labelKey}`;\n\n    let existingLabel = labels.find((label) => label.name === labelConfig.name);\n    if (!existingLabel) {\n      existingLabel = labels.find((label) => label.description === description);\n    }\n    if (!existingLabel) {\n      if (labelKey === 'design/needs-review') {\n        existingLabel = labels.find(\n          (label) => label.name === 'needs-design-review',\n        );\n      }\n      if (labelKey === 'design/approved') {\n        existingLabel = labels.find(\n          (label) => label.name === 'design-reviewed',\n        );\n      }\n    }\n\n    if (!existingLabel) {\n      const result = await context.github.issues.createLabel(\n        context.repo({\n          name: labelConfig.name,\n          color: labelColor,\n          description,\n        }),\n      );\n      finalLabels[labelKey] = result.data;\n    } else if (\n      existingLabel.name !== labelConfig.name ||\n      existingLabel.color !== labelColor // ||\n      // TODO: description is never updated\n      // existingLabel.description !== description\n    ) {\n      context.log.info('Needs to update label', {\n        current_name: existingLabel.name,\n        name: existingLabel.name !== labelConfig.name && labelConfig.name,\n        color: existingLabel.color !== labelColor && labelColor,\n        description: existingLabel.description !== description && description,\n      });\n\n      const result = await context.github.issues.updateLabel(\n        context.repo({\n          current_name: existingLabel.name,\n          name: labelConfig.name,\n          color: labelColor,\n          description,\n        }),\n      );\n      finalLabels[labelKey] = result.data;\n    } else {\n      finalLabels[labelKey] = existingLabel;\n    }\n  }\n\n  return finalLabels;\n};\n","export const getKeys = <T extends {}>(o: T): (keyof T)[] =>\n  Object.keys(o) as (keyof T)[];\n","import { WebClient } from '@slack/web-api';\nimport { Context } from 'probot';\nimport { Config } from '../teamconfigs';\nimport { getKeys } from './utils';\n\nexport interface TeamSlack {\n  mention: (githubLogin: string) => string;\n  postMessage: (githubLogin: string, text: string) => Promise<void>;\n}\n\nconst ExcludesFalsy = (Boolean as any) as <T>(\n  x: T | false | null | undefined,\n) => x is T;\n\nexport const initTeamSlack = async <GroupNames extends string>(\n  context: Context<any>,\n  config: Config<GroupNames>,\n): Promise<TeamSlack> => {\n  if (!config.slackToken) {\n    return {\n      mention: (githubLogin: string) => '',\n      postMessage: (githubLogin: string, text: string) => Promise.resolve(),\n    };\n  }\n\n  const githubLoginToSlackEmail = getKeys(config.groups).reduce<{\n    [login: string]: string;\n  }>((acc, groupName) => {\n    Object.assign(acc, config.groups[groupName]);\n    return acc;\n  }, {});\n\n  const slackClient = new WebClient(config.slackToken);\n  const allUsers: any = await slackClient.users.list({ limit: 200 });\n  const members: [string, { member: any; im: any }][] = Object.values(\n    githubLoginToSlackEmail,\n  )\n    .map((email) => {\n      const member = allUsers.members.find(\n        (user: any) => user.profile.email === email,\n      );\n      if (!member) {\n        console.warn(`Could not find user ${email}`);\n        return;\n      }\n      return [email, { member, im: undefined }] as [\n        string,\n        { member: any; im: any }\n      ];\n    })\n    .filter(ExcludesFalsy);\n\n  for (const [, user] of members) {\n    try {\n      const im: any = await slackClient.im.open({ user: user.member.id });\n      user.im = im.channel;\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  const membersMap = new Map(members);\n\n  const getUserFromGithubLogin = (githubLogin: string) => {\n    const email = githubLoginToSlackEmail[githubLogin];\n    if (!email) return null;\n    return membersMap.get(email);\n  };\n\n  return {\n    mention: (githubLogin: string) => {\n      const user = getUserFromGithubLogin(githubLogin);\n      if (!user) return githubLogin;\n      return `<@${user.member.id}>`;\n    },\n    postMessage: async (githubLogin: string, text: string) => {\n      context.log.info('send slack', { githubLogin, text });\n      if (process.env.DRY_RUN) return;\n\n      const user = getUserFromGithubLogin(githubLogin);\n      if (!user || !user.im) return;\n      await slackClient.chat.postMessage({\n        channel: user.im.id,\n        text,\n      });\n    },\n  };\n};\n","import { Context } from 'probot';\nimport { Config } from '../teamconfigs';\nimport { initTeamSlack, TeamSlack } from './initTeamSlack';\nimport { getKeys } from './utils';\n\nexport interface TeamContext<GroupNames extends string = any> {\n  config: Config<GroupNames>;\n  slack: TeamSlack;\n  getReviewerGroup: (githubLogin: string) => string | undefined;\n  getReviewerGroups: (githubLogins: string[]) => string[];\n  reviewShouldWait: (\n    reviewerGroup: GroupNames | undefined,\n    requestedReviewers: any[],\n    {\n      includesReviewerGroup,\n      includesWaitForGroups,\n    }: { includesReviewerGroup?: boolean; includesWaitForGroups?: boolean },\n  ) => boolean;\n}\nconst ExcludesFalsy = (Boolean as any) as <T>(\n  x: T | false | null | undefined,\n) => x is T;\n\nconst initTeamContext = async (\n  context: Context<any>,\n  config: Config,\n): Promise<TeamContext> => {\n  const slackPromise = initTeamSlack(context, config);\n\n  const githubLoginToGroup = getKeys(config.groups).reduce<Map<string, string>>(\n    (acc, groupName) => {\n      Object.keys(config.groups[groupName]).forEach((login) => {\n        acc.set(login, groupName);\n      });\n      return acc;\n    },\n    new Map(),\n  );\n\n  const getReviewerGroups = (githubLogins: string[]) => [\n    ...new Set(\n      githubLogins\n        .map((githubLogin) => githubLoginToGroup.get(githubLogin))\n        .filter(Boolean),\n    ),\n  ];\n\n  return {\n    config,\n    getReviewerGroup: (githubLogin) => githubLoginToGroup.get(githubLogin),\n    getReviewerGroups: (githubLogins) => [\n      ...new Set(\n        githubLogins\n          .map((githubLogin) => githubLoginToGroup.get(githubLogin))\n          .filter(ExcludesFalsy),\n      ),\n    ],\n\n    reviewShouldWait: (\n      reviewerGroup,\n      requestedReviewers,\n      { includesReviewerGroup, includesWaitForGroups },\n    ) => {\n      if (!reviewerGroup) return false;\n\n      const requestedReviewerGroups = getReviewerGroups(\n        requestedReviewers.map((request) => request.login),\n      );\n\n      // contains another request of a reviewer in the same group\n      if (\n        includesReviewerGroup &&\n        requestedReviewerGroups.includes(reviewerGroup)\n      ) {\n        return true;\n      }\n\n      // contains a request from a dependent group\n      if (config.waitForGroups && includesWaitForGroups) {\n        const waitForGroups = config.waitForGroups;\n        return requestedReviewerGroups.some((group) =>\n          waitForGroups[reviewerGroup].includes(group),\n        );\n      }\n\n      return false;\n    },\n\n    slack: await slackPromise,\n  };\n};\n\nconst teamContextsPromise = new Map();\nconst teamContexts = new Map();\n\nexport const obtainTeamContext = (\n  context: Context<any>,\n  config: Config,\n): Promise<TeamContext> => {\n  const owner = context.payload.repository.owner;\n\n  const existingTeamContext = teamContexts.get(owner.login);\n  if (existingTeamContext) return existingTeamContext;\n\n  const existingPromise = teamContextsPromise.get(owner.login);\n  if (existingPromise) return Promise.resolve(existingPromise);\n\n  const promise = initTeamContext(context, config);\n  teamContextsPromise.set(owner.login, promise);\n\n  return promise.then((teamContext) => {\n    teamContextsPromise.delete(owner.login);\n    teamContexts.set(owner.login, teamContext);\n    return teamContext;\n  });\n};\n","/* eslint-disable max-lines */\n\nimport { Lock } from 'lock';\nimport { Context } from 'probot';\nimport { teamConfigs, Config } from '../teamconfigs';\n// eslint-disable-next-line import/no-cycle\nimport { autoMergeIfPossible } from '../pr-handlers/actions/autoMergeIfPossible';\nimport { initRepoLabels, LabelResponse, Labels } from './initRepoLabels';\nimport { obtainTeamContext, TeamContext } from './teamContext';\n\nexport interface LockedMergePr {\n  id: number;\n  number: number;\n  branch: string;\n}\n\ninterface RepoContextWithoutTeamContext<GroupNames extends string> {\n  labels: Labels;\n  protectedLabelIds: readonly LabelResponse['id'][];\n\n  hasNeedsReview: (labels: LabelResponse[]) => boolean;\n  hasRequestedReview: (labels: LabelResponse[]) => boolean;\n  hasChangesRequestedReview: (labels: LabelResponse[]) => boolean;\n  hasApprovesReview: (labels: LabelResponse[]) => boolean;\n  getNeedsReviewGroupNames: (labels: LabelResponse[]) => GroupNames[];\n\n  lockPROrPRS(\n    prIdOrIds: string | string[],\n    callback: () => Promise<void> | void,\n  ): Promise<void>;\n\n  getMergeLockedPr(): LockedMergePr;\n  addMergeLockPr(pr: LockedMergePr): void;\n  removeMergeLockedPr(context: Context<any>, pr: LockedMergePr): void;\n  reschedule(context: Context<any>, pr: LockedMergePr): void;\n  pushAutomergeQueue(pr: LockedMergePr): void;\n}\n\nconst ExcludesFalsy = (Boolean as any) as <T>(\n  x: T | false | null | undefined,\n) => x is T;\n\nexport type RepoContext<GroupNames extends string = any> = TeamContext<\n  GroupNames\n> &\n  RepoContextWithoutTeamContext<GroupNames>;\n\nasync function initRepoContext<GroupNames extends string>(\n  context: Context<any>,\n  config: Config<GroupNames>,\n): Promise<RepoContext<GroupNames>> {\n  const teamContext = await obtainTeamContext(context, config);\n  const repoContext = Object.create(teamContext);\n\n  const [labels] = await Promise.all([initRepoLabels(context, config)]);\n\n  const reviewGroupNames = Object.keys(config.groups) as GroupNames[];\n\n  const needsReviewLabelIds = reviewGroupNames\n    .map((key: GroupNames) => config.labels.review[key].needsReview)\n    .filter(Boolean)\n    .map((name) => labels[name].id);\n\n  const requestedReviewLabelIds = reviewGroupNames\n    .map((key) => config.labels.review[key].requested)\n    .filter(Boolean)\n    .map((name) => labels[name].id);\n\n  const changesRequestedLabelIds = reviewGroupNames\n    .map((key) => config.labels.review[key].changesRequested)\n    .filter(Boolean)\n    .map((name) => labels[name].id);\n\n  const approvedReviewLabelIds = reviewGroupNames\n    .map((key) => config.labels.review[key].approved)\n    .filter(Boolean)\n    .map((name) => labels[name].id);\n\n  const protectedLabelIds = [\n    ...requestedReviewLabelIds,\n    ...changesRequestedLabelIds,\n    ...approvedReviewLabelIds,\n  ];\n  if (labels['feature-branch']) {\n    protectedLabelIds.push(labels['feature-branch'].id);\n  }\n\n  const labelIdToGroupName = new Map<LabelResponse['id'], GroupNames>();\n  reviewGroupNames.forEach((key) => {\n    const reviewGroupLabels = config.labels.review[key] as any;\n    Object.keys(reviewGroupLabels).forEach((labelKey: string) => {\n      labelIdToGroupName.set(labels[reviewGroupLabels[labelKey]].id, key);\n    });\n  });\n\n  // const updateStatusCheck = (context, reviewGroup, statusInfo) => {};\n\n  const hasNeedsReview = (labels: LabelResponse[]) =>\n    labels.some((label) => needsReviewLabelIds.includes(label.id));\n  const hasRequestedReview = (labels: LabelResponse[]) =>\n    labels.some((label) => requestedReviewLabelIds.includes(label.id));\n  const hasChangesRequestedReview = (labels: LabelResponse[]) =>\n    labels.some((label) => changesRequestedLabelIds.includes(label.id));\n  const hasApprovesReview = (labels: LabelResponse[]) =>\n    labels.some((label) => approvedReviewLabelIds.includes(label.id));\n\n  const getNeedsReviewGroupNames = (labels: LabelResponse[]): GroupNames[] =>\n    labels\n      .filter((label) => needsReviewLabelIds.includes(label.id))\n      .map((label) => labelIdToGroupName.get(label.id))\n      .filter(ExcludesFalsy);\n\n  const lock = Lock();\n  let lockMergePr: LockedMergePr | undefined;\n  const automergeQueue: LockedMergePr[] = [];\n\n  const lockPROrPRS = (\n    prIdOrIds: string | string[],\n    callback: () => Promise<void> | void,\n  ): Promise<void> =>\n    new Promise((resolve, reject) => {\n      console.log('lock: try to lock pr', { prIdOrIds });\n      lock(prIdOrIds, async (createReleaseCallback) => {\n        const release = createReleaseCallback(() => {});\n        console.log('lock: lock acquired', { prIdOrIds });\n        try {\n          await callback();\n        } catch (err) {\n          console.log('lock: release pr (with error)', { prIdOrIds });\n          release();\n          reject(err);\n          return;\n        }\n        console.log('lock: release pr', { prIdOrIds });\n        release();\n        resolve();\n      });\n    });\n\n  const reschedule = (context: Context<any>, pr: LockedMergePr) => {\n    if (!pr) throw new Error('Cannot reschedule undefined');\n    context.log.info('reschedule', pr);\n    setTimeout(() => {\n      lockPROrPRS('reschedule', () => {\n        return lockPROrPRS(String(pr.id), async () => {\n          const prResult = await context.github.pulls.get(\n            context.repo({\n              pull_number: pr.number,\n            }),\n          );\n          await autoMergeIfPossible(context, repoContext, prResult.data);\n        });\n      });\n    }, 1000);\n  };\n\n  return Object.assign(repoContext, {\n    labels,\n    protectedLabelIds,\n    hasNeedsReview,\n    hasRequestedReview,\n    hasChangesRequestedReview,\n    hasApprovesReview,\n    getNeedsReviewGroupNames,\n\n    getMergeLockedPr: () => lockMergePr,\n    addMergeLockPr: (pr: LockedMergePr): void => {\n      console.log('merge lock: lock', pr);\n      if (lockMergePr && lockMergePr.number === pr.number) return;\n      if (lockMergePr) throw new Error('Already have lock');\n      lockMergePr = pr;\n    },\n    removeMergeLockedPr: (context, pr: LockedMergePr): void => {\n      console.log('merge lock: remove', pr);\n      if (!lockMergePr || lockMergePr.number !== pr.number) return;\n      lockMergePr = automergeQueue.shift();\n      console.log('merge lock: next', lockMergePr);\n      if (lockMergePr) {\n        reschedule(context, lockMergePr);\n      }\n    },\n    pushAutomergeQueue: (pr: LockedMergePr): void => {\n      console.log('merge lock: push queue', {\n        pr,\n        lockMergePr,\n        automergeQueue,\n      });\n      if (!automergeQueue.some((p) => p.number === pr.number)) {\n        automergeQueue.push(pr);\n      }\n    },\n    reschedule,\n\n    lockPROrPRS,\n  } as RepoContextWithoutTeamContext<GroupNames>);\n}\n\nconst repoContextsPromise = new Map<number, Promise<RepoContext>>();\nconst repoContexts = new Map<number, RepoContext>();\n\nexport const obtainRepoContext = (\n  context: Context<any>,\n): Promise<RepoContext> | RepoContext | null => {\n  const repo = context.payload.repository;\n  if (\n    repo.name === 'reviewflow-test' &&\n    process.env.NAME !== 'reviewflow-test'\n  ) {\n    return null;\n  }\n  const owner = repo.owner;\n  if (!teamConfigs[owner.login]) {\n    console.warn(owner.login, Object.keys(teamConfigs));\n    return null;\n  }\n  const key = repo.id;\n\n  const existingRepoContext = repoContexts.get(key);\n  if (existingRepoContext) return existingRepoContext;\n\n  const existingPromise = repoContextsPromise.get(key);\n  if (existingPromise) return Promise.resolve(existingPromise);\n\n  const promise = initRepoContext(context, teamConfigs[owner.login]);\n  repoContextsPromise.set(key, promise);\n\n  return promise.then((repoContext) => {\n    repoContextsPromise.delete(key);\n    repoContexts.set(key, repoContext);\n    return repoContext;\n  });\n};\n","import Webhooks from '@octokit/webhooks';\nimport { Context } from 'probot';\nimport { obtainRepoContext, RepoContext } from '../context/repoContext';\n\nexport type Handler<T = any> = (\n  context: Context<T>,\n  repoContext: RepoContext,\n) => Promise<void>;\n\nexport type CallbackWithRepoContext = (\n  repoContext: RepoContext,\n) => void | Promise<void>;\n\nexport const handlerPullRequestChange = async <\n  T extends Webhooks.WebhookPayloadPullRequest\n>(\n  context: Context<T>,\n  callback: CallbackWithRepoContext,\n): Promise<void> => {\n  const repoContext = await obtainRepoContext(context);\n  if (!repoContext) return;\n\n  repoContext.lockPROrPRS(String(context.payload.pull_request.id), async () => {\n    await callback(repoContext);\n  });\n};\n\ntype CallbackContextAndRepoContext<T> = (\n  context: Context<T>,\n  repoContext: RepoContext,\n) => void | Promise<void>;\n\nexport const createHandlerPullRequestChange = <\n  T extends Webhooks.WebhookPayloadPullRequest\n>(\n  callback: CallbackContextAndRepoContext<T>,\n) => (context: Context<T>) => {\n  return handlerPullRequestChange(context, (repoContext) =>\n    callback(context, repoContext),\n  );\n};\n\nexport const createHandlerPullRequestsChange = <T>(\n  getPullRequests: (\n    context: Context<T>,\n    repoContext: RepoContext,\n  ) => { id: string | number }[],\n  callback: CallbackContextAndRepoContext<T>,\n) => async (context: Context<T>): Promise<void> => {\n  const repoContext = await obtainRepoContext(context);\n  if (!repoContext) return;\n\n  const prs = getPullRequests(context, repoContext);\n  if (prs.length === 0) return;\n  return repoContext.lockPROrPRS(prs.map((pr) => String(pr.id)), () =>\n    callback(context, repoContext),\n  );\n};\n","import Webhooks from '@octokit/webhooks';\nimport { Handler } from '../utils';\n\nexport const autoAssignPRToCreator: Handler<\n  Webhooks.WebhookPayloadPullRequest\n> = async (context, repoContext) => {\n  if (!repoContext.config.autoAssignToCreator) return;\n\n  const pr = context.payload.pull_request;\n  if (pr.assignees.length !== 0) return;\n  if (pr.user.type === 'Bot') return;\n\n  await context.github.issues.addAssignees(\n    context.issue({\n      assignees: [pr.user.login],\n    }),\n  );\n};\n","export const cleanTitle = (title: string): string =>\n  title\n    .trim()\n    .replace(/[\\s-]+\\[?\\s*ONK[- ](\\d+)\\s*]?\\s*$/i, ' ONK-$1')\n    .replace(/^([A-Za-z]+)[/:]\\s*/, (s, arg1) => `${arg1.toLowerCase()}: `)\n    .replace(/^Revert \"([^\"]+)\"$/, 'revert: $1')\n    // eslint-disable-next-line unicorn/no-unsafe-regex\n    .replace(/^(revert:.*)(\\s+\\(#\\d+\\))$/, '$1');\n","import { StatusInfo } from '../../../teamconfigs/types';\nimport { parseBody } from './parseBody';\nimport { Options, optionsLabels } from './prOptions';\n\nconst toMarkdownOptions = (options: Record<Options, boolean>) => {\n  return optionsLabels\n    .map(\n      ({ name, label }) =>\n        `- [${options[name] ? 'x' : ' '}] <!-- reviewflow-${name} -->${label}`,\n    )\n    .join('\\n');\n};\n\nconst toMarkdownInfos = (infos: StatusInfo[]) => {\n  return infos\n    .map((info) => {\n      if (info.url) return `[${info.title}](${info.url})`;\n      return info.title;\n    })\n    .join('\\n');\n};\n\ninterface UpdatedBodyWithOptions {\n  body: string;\n  options?: Record<Options, boolean>;\n}\n\nexport const updateBody = (\n  body: string,\n  defaultConfig: Record<Options, boolean>,\n  infos?: StatusInfo[],\n): UpdatedBodyWithOptions => {\n  const parsed = parseBody(body, defaultConfig);\n  if (!parsed) {\n    console.info('could not parse body');\n    return { body };\n  }\n  const {\n    content,\n    reviewflowContentColPrefix,\n    reviewflowContentColSuffix,\n    options,\n  } = parsed;\n\n  return {\n    options: parsed.options,\n    body: `${content}${reviewflowContentColPrefix}\n${\n  infos && infos.length !== 0 ? `#### Infos:\\n${toMarkdownInfos(infos)}\\n` : ''\n}#### Options:\n${toMarkdownOptions(options)}\n${reviewflowContentColSuffix}\n`,\n  };\n};\n","import Webhooks from '@octokit/webhooks';\nimport { Context } from 'probot';\nimport { RepoContext } from '../../context/repoContext';\nimport { StatusError, StatusInfo } from '../../teamconfigs/types';\nimport { cleanTitle } from './utils/cleanTitle';\nimport { updateBody } from './utils/updateBody';\n\ninterface StatusWithInfo {\n  name: string;\n  info: StatusInfo;\n  error?: undefined;\n}\n\ninterface StatusWithError {\n  name: string;\n  error: StatusError;\n  info?: undefined;\n}\n\ntype Status = StatusWithInfo | StatusWithError;\n\nconst ExcludesFalsy = (Boolean as any) as <T>(\n  x: T | false | null | undefined,\n) => x is T;\n\nexport const editOpenedPR = async (\n  context: Context<Webhooks.WebhookPayloadPullRequest>,\n  repoContext: RepoContext,\n): Promise<void> => {\n  const repo = context.payload.repository;\n  const pr = context.payload.pull_request;\n\n  // do not lint pr from forks\n  if (pr.head.repo.id !== repo.id) return;\n\n  const title = repoContext.config.trimTitle ? cleanTitle(pr.title) : pr.title;\n\n  const isPrFromBot = pr.user.type === 'Bot';\n\n  const statuses: Status[] = [];\n\n  const errorRule = repoContext.config.parsePR.title.find((rule) => {\n    if (rule.bot === false && isPrFromBot) return false;\n\n    const match = rule.regExp.exec(pr.title);\n    if (match === null) {\n      if (rule.status) {\n        statuses.push({ name: rule.status, error: rule.error });\n      }\n      return true;\n    }\n\n    if (rule.status && rule.statusInfoFromMatch) {\n      statuses.push({\n        name: rule.status,\n        info: rule.statusInfoFromMatch(match),\n      });\n      return false;\n    }\n\n    return false;\n  });\n\n  const date = new Date().toISOString();\n\n  const hasLintPrCheck = (await context.github.checks.listForRef(\n    context.repo({\n      ref: pr.head.sha,\n    }),\n  )).data.check_runs.find(\n    (check) => check.name === `${process.env.NAME}/lint-pr`,\n  );\n\n  await Promise.all<any>(\n    [\n      ...statuses.map(({ name, error, info }) =>\n        context.github.repos.createStatus(\n          context.repo({\n            context: `${process.env.NAME}/${name}`,\n            sha: pr.head.sha,\n            state: (error ? 'failure' : 'success') as 'failure' | 'success',\n            target_url: error ? undefined : (info as StatusInfo).url,\n            description: error ? error.title : (info as StatusInfo).title,\n          }),\n        ),\n      ),\n      hasLintPrCheck &&\n        context.github.checks.create(\n          context.repo({\n            name: `${process.env.NAME}/lint-pr`,\n            head_sha: pr.head.sha,\n            status: 'completed' as 'completed',\n            conclusion: (errorRule ? 'failure' : 'success') as\n              | 'failure'\n              | 'success',\n            started_at: date,\n            completed_at: date,\n            output: errorRule\n              ? errorRule.error\n              : {\n                  title: '✓ Your PR is valid',\n                  summary: '',\n                },\n          }),\n        ),\n      !hasLintPrCheck &&\n        context.github.repos.createStatus(\n          context.repo({\n            context: `${process.env.NAME}/lint-pr`,\n            sha: pr.head.sha,\n            state: (errorRule ? 'failure' : 'success') as 'failure' | 'success',\n            target_url: undefined,\n            description: errorRule\n              ? errorRule.error.title\n              : '✓ Your PR is valid',\n          }),\n        ),\n    ].filter(ExcludesFalsy),\n  );\n\n  const featureBranchLabel = repoContext.labels['feature-branch'];\n  const prHasFeatureBranchLabel = Boolean(\n    featureBranchLabel &&\n      pr.labels.find((label): boolean => label.id === featureBranchLabel.id),\n  );\n  const defaultOptions = {\n    ...repoContext.config.prDefaultOptions,\n    featureBranch: prHasFeatureBranchLabel,\n  };\n\n  const { body, options } = updateBody(pr.body, defaultOptions, statuses\n    .filter((status) => status.info && status.info.inBody)\n    .map((status) => status.info) as StatusInfo[]);\n\n  const hasDiffInTitle = pr.title !== title;\n  const hasDiffInBody = pr.body !== body;\n  if (hasDiffInTitle || hasDiffInBody) {\n    const update: Partial<Record<'title' | 'body', string>> = {};\n    if (hasDiffInTitle) {\n      update.title = title;\n      pr.title = title;\n    }\n    if (hasDiffInBody) {\n      update.body = body;\n      pr.body = body;\n    }\n\n    await context.github.issues.update(context.issue(update));\n  }\n\n  console.log(options);\n  if (options && featureBranchLabel) {\n    if (prHasFeatureBranchLabel && !options.featureBranch) {\n      await context.github.issues.removeLabel(\n        context.issue({ name: featureBranchLabel.name }),\n      );\n    }\n\n    if (options.featureBranch && !prHasFeatureBranchLabel) {\n      await context.github.issues.addLabels(\n        context.issue({ labels: [featureBranchLabel.name] }),\n      );\n    }\n  }\n};\n","import Webhooks from '@octokit/webhooks';\nimport { Context } from 'probot';\nimport { LabelResponse } from '../../context/initRepoLabels';\nimport { RepoContext } from '../../context/repoContext';\n\nconst addStatusCheck = async function<\n  E extends Webhooks.WebhookPayloadPullRequest\n>(\n  context: Context<E>,\n  pr: any,\n  { state, description }: { state: 'failure' | 'success'; description: string },\n): Promise<void> {\n  const hasPrCheck = (await context.github.checks.listForRef(\n    context.repo({\n      ref: pr.head.sha,\n    }),\n  )).data.check_runs.find((check) => check.name === process.env.NAME);\n\n  context.log.info('add status check', { hasPrCheck, state, description });\n\n  if (hasPrCheck) {\n    await context.github.checks.create(\n      context.repo({\n        name: process.env.NAME as string,\n        head_sha: pr.head.sha,\n        started_at: pr.created_at,\n        status: 'completed',\n        conclusion: state,\n        completed_at: new Date().toISOString(),\n        output: {\n          title: description,\n          summary: '',\n        },\n      }),\n    );\n  } else {\n    await context.github.repos.createStatus(\n      context.repo({\n        context: process.env.NAME,\n        sha: pr.head.sha,\n        state,\n        target_url: undefined,\n        description,\n      }),\n    );\n  }\n};\n\nconst createFailedStatusCheck = <E extends Webhooks.WebhookPayloadPullRequest>(\n  context: Context<E>,\n  pr: any,\n  description: string,\n): Promise<void> =>\n  addStatusCheck(context, pr, {\n    state: 'failure',\n    description,\n  });\n\nexport const updateStatusCheckFromLabels = (\n  context: Context<any>,\n  repoContext: RepoContext,\n  pr: any = context.payload.pull_request,\n  labels: LabelResponse[] = pr.labels || [],\n): Promise<void> => {\n  context.log.info('updateStatusCheckFromLabels', {\n    labels: labels.map((l) => l && l.name),\n    hasNeedsReview: repoContext.hasNeedsReview(labels),\n    hasApprovesReview: repoContext.hasApprovesReview(labels),\n  });\n\n  if (pr.requested_reviewers.length !== 0) {\n    return createFailedStatusCheck(\n      context,\n      pr,\n      `Awaiting review from: ${pr.requested_reviewers\n        .map((rr: any) => rr.login)\n        .join(', ')}`,\n    );\n  }\n\n  if (repoContext.hasChangesRequestedReview(labels)) {\n    return createFailedStatusCheck(\n      context,\n      pr,\n      'Changes requested ! Push commits or discuss changes then re-request a review.',\n    );\n  }\n\n  const needsReviewGroupNames = repoContext.getNeedsReviewGroupNames(labels);\n\n  if (needsReviewGroupNames.length !== 0) {\n    return createFailedStatusCheck(\n      context,\n      pr,\n      `Awaiting review from: ${needsReviewGroupNames.join(\n        ', ',\n      )}. Perhaps request someone ?`,\n    );\n  }\n\n  if (!repoContext.hasApprovesReview(labels)) {\n    if (\n      repoContext.config.requiresReviewRequest &&\n      !pr.head.ref.startsWith('renovate/')\n    ) {\n      return createFailedStatusCheck(\n        context,\n        pr,\n        'Awaiting review... Perhaps request someone ?',\n      );\n    }\n  }\n\n  // if (\n  //   repoContext.config.requiresReviewRequest &&\n  //   !repoContext.hasRequestedReview(labels)\n  // ) {\n  //   return  createFailedStatusCheck(\n  //     context,\n  //     pr,\n  //     'You need to request someone to review the PR',\n  //   );\n  //   return;\n  // }\n  // return  createInProgressStatusCheck(context);\n  // } else if (repoContext.hasApprovesReview(labels)) {\n  return addStatusCheck(context, pr, {\n    state: 'success',\n    description: '✓ PR ready to merge !',\n  });\n  // }\n};\n","import Webhooks from '@octokit/webhooks';\nimport { Context } from 'probot';\nimport { LabelResponse } from '../../context/initRepoLabels';\nimport { GroupLabels } from '../../teamconfigs/types';\nimport { RepoContext } from '../../context/repoContext';\nimport { updateStatusCheckFromLabels } from './updateStatusCheckFromLabels';\n\nexport const updateReviewStatus = async <\n  E extends Webhooks.WebhookPayloadPullRequest,\n  GroupNames extends string = any\n>(\n  context: Context<E>,\n  repoContext: RepoContext,\n  reviewGroup: GroupNames,\n  {\n    add: labelsToAdd,\n    remove: labelsToRemove,\n  }: {\n    add?: (GroupLabels | false | undefined)[];\n    remove?: (GroupLabels | false | undefined)[];\n  },\n): Promise<LabelResponse[]> => {\n  context.log.info('updateReviewStatus', {\n    reviewGroup,\n    labelsToAdd,\n    labelsToRemove,\n  });\n\n  const pr = context.payload.pull_request;\n  let prLabels = pr.labels || [];\n  if (!reviewGroup) return prLabels;\n\n  const newLabelNames = new Set<string>(\n    prLabels.map((label: LabelResponse) => label.name),\n  );\n\n  const toAdd = new Set<GroupLabels>();\n  const toDelete = new Set<GroupLabels>();\n  const labels = repoContext.labels;\n\n  const getLabelFromKey = (key: GroupLabels): undefined | LabelResponse => {\n    const reviewConfig = repoContext.config.labels.review[reviewGroup];\n    if (!reviewConfig) return undefined;\n\n    return reviewConfig[key] && labels[reviewConfig[key]]\n      ? labels[reviewConfig[key]]\n      : undefined;\n  };\n\n  if (labelsToAdd) {\n    labelsToAdd.forEach((key) => {\n      if (!key) return;\n      const label = getLabelFromKey(key);\n      if (\n        !label ||\n        prLabels.some((prLabel: LabelResponse) => prLabel.id === label.id)\n      ) {\n        return;\n      }\n      newLabelNames.add(label.name);\n      toAdd.add(key);\n    });\n  }\n\n  if (labelsToRemove) {\n    labelsToRemove.forEach((key) => {\n      if (!key) return;\n      const label = getLabelFromKey(key);\n      if (!label) return;\n      const existing = prLabels.find(\n        (prLabel: LabelResponse) => prLabel.id === label.id,\n      );\n      if (existing) {\n        newLabelNames.delete(existing.name);\n        toDelete.add(key);\n      }\n    });\n  }\n\n  const newLabelNamesArray = [...newLabelNames];\n\n  context.log.info('updateReviewStatus', {\n    reviewGroup,\n    toAdd: [...toAdd],\n    toDelete: [...toDelete],\n    oldLabels: prLabels.map((l: LabelResponse) => l.name),\n    newLabelNames: newLabelNamesArray,\n  });\n\n  // if (process.env.DRY_RUN) return;\n\n  if (toAdd.size || toDelete.size) {\n    const result = await context.github.issues.replaceLabels(\n      context.issue({\n        labels: newLabelNamesArray,\n      }),\n    );\n    prLabels = result.data;\n  }\n\n  // if (toAdd.has('needsReview')) {\n  //   createInProgressStatusCheck(context);\n  // } else if (\n  //   toDelete.has('needsReview') ||\n  //   (prLabels.length === 0 && toAdd.size === 1 && toAdd.has('approved'))\n  // ) {\n  await updateStatusCheckFromLabels(context, repoContext, pr, prLabels);\n  // }\n\n  return prLabels;\n};\n","import Webhooks from '@octokit/webhooks';\nimport { Context } from 'probot';\nimport { RepoContext } from '../../context/repoContext';\nimport { autoMergeIfPossible } from './autoMergeIfPossible';\n\nexport const autoApproveAndAutoMerge = async (\n  context: Context<Webhooks.WebhookPayloadPullRequest>,\n  repoContext: RepoContext,\n): Promise<void> => {\n  // const autoMergeLabel = repoContext.labels['merge/automerge'];\n  const codeApprovedLabel = repoContext.labels['code/approved'];\n  const prLabels = context.payload.pull_request.labels;\n  if (prLabels.find((l): boolean => l.id === codeApprovedLabel.id)) {\n    await context.github.pulls.createReview(\n      context.issue({ event: 'APPROVE' }),\n    );\n  }\n\n  await autoMergeIfPossible(context, repoContext);\n};\n","import { Application } from 'probot';\nimport { createHandlerPullRequestChange } from './utils';\nimport { autoAssignPRToCreator } from './actions/autoAssignPRToCreator';\nimport { editOpenedPR } from './actions/editOpenedPR';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { autoApproveAndAutoMerge } from './actions/autoApproveAndAutoMerge';\n\nexport default function opened(app: Application): void {\n  app.on(\n    'pull_request.opened',\n    createHandlerPullRequestChange(\n      async (context, repoContext): Promise<void> => {\n        const fromRenovate = context.payload.pull_request.head.ref.startsWith(\n          'renovate/',\n        );\n\n        await Promise.all<unknown>([\n          autoAssignPRToCreator(context, repoContext),\n          editOpenedPR(context, repoContext),\n          fromRenovate\n            ? autoApproveAndAutoMerge(context, repoContext)\n            : updateReviewStatus(context, repoContext, 'dev', {\n                add: ['needsReview'],\n                remove: ['approved', 'changesRequested'],\n              }),\n        ]);\n      },\n    ),\n  );\n}\n","import { Application } from 'probot';\nimport { createHandlerPullRequestChange } from './utils';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { parseBody } from './actions/utils/parseBody';\n\nexport default function closed(app: Application): void {\n  app.on(\n    'pull_request.closed',\n    createHandlerPullRequestChange(\n      async (context, repoContext): Promise<void> => {\n        const repo = context.payload.repository;\n        const pr = context.payload.pull_request;\n\n        if (pr.merged) {\n          const parsedBody =\n            pr.head.repo.id === repo.id &&\n            parseBody(pr.body, repoContext.config.prDefaultOptions);\n          const createMergeLockPrFromPr = () => ({\n            id: pr.id,\n            number: pr.number,\n            branch: pr.head.ref,\n          });\n          await Promise.all([\n            repoContext.removeMergeLockedPr(context, createMergeLockPrFromPr()),\n            parsedBody && parsedBody.options.deleteAfterMerge\n              ? context.github.git\n                  .deleteRef(context.repo({ ref: `heads/${pr.head.ref}` }))\n                  .catch(() => {})\n              : undefined,\n          ]);\n        } else {\n          await Promise.all([\n            updateReviewStatus(context, repoContext, 'dev', {\n              remove: ['needsReview'],\n            }),\n          ]);\n        }\n      },\n    ),\n  );\n}\n","import { Application } from 'probot';\nimport { createHandlerPullRequestChange } from './utils';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\n\nexport default function reviewRequested(app: Application): void {\n  app.on(\n    'pull_request.review_requested',\n    createHandlerPullRequestChange(\n      async (context, repoContext): Promise<void> => {\n        const sender = context.payload.sender;\n\n        // ignore if sender is self (dismissed review rerequest review)\n        if (sender.type === 'Bot') return;\n\n        const pr = context.payload.pull_request;\n        const reviewer = (context.payload as any).requested_reviewer;\n\n        const reviewerGroup = repoContext.getReviewerGroup(reviewer.login);\n        const shouldWait = false;\n        // repoContext.reviewShouldWait(reviewerGroup, pr.requested_reviewers, { includesWaitForGroups: true });\n\n        if (reviewerGroup && repoContext.config.labels.review[reviewerGroup]) {\n          const { data: reviews } = await context.github.pulls.listReviews(\n            context.issue({ per_page: 50 }),\n          );\n          const hasChangesRequestedInReviews = reviews.some(\n            (review) =>\n              repoContext.getReviewerGroup(review.user.login) ===\n                reviewerGroup &&\n              review.state === 'REQUEST_CHANGES' &&\n              // In case this is a rerequest for review\n              review.user.login !== reviewer.login,\n          );\n\n          if (!hasChangesRequestedInReviews) {\n            await updateReviewStatus(context, repoContext, reviewerGroup, {\n              add: ['needsReview', !shouldWait && 'requested'],\n              remove: ['approved', 'changesRequested'],\n            });\n          }\n        }\n\n        if (sender.login === reviewer.login) return;\n\n        if (!shouldWait && repoContext.slack) {\n          repoContext.slack.postMessage(\n            reviewer.login,\n            `:eyes: ${repoContext.slack.mention(\n              sender.login,\n            )} requests your review on ${pr.html_url} !\\n> ${pr.title}`,\n          );\n        }\n      },\n    ),\n  );\n}\n","import { Application } from 'probot';\nimport { createHandlerPullRequestChange } from './utils';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\n\nexport default function reviewRequestRemoved(app: Application): void {\n  app.on(\n    'pull_request.review_request_removed',\n    createHandlerPullRequestChange(\n      async (context, repoContext): Promise<void> => {\n        const sender = context.payload.sender;\n        const pr = context.payload.pull_request;\n        const reviewer = (context.payload as any).requested_reviewer;\n\n        const reviewerGroup = repoContext.getReviewerGroup(reviewer.login);\n\n        if (reviewerGroup && repoContext.config.labels.review[reviewerGroup]) {\n          const hasRequestedReviewsForGroup = repoContext.reviewShouldWait(\n            reviewerGroup,\n            pr.requested_reviewers,\n            {\n              includesReviewerGroup: true,\n            },\n          );\n\n          const { data: reviews } = await context.github.pulls.listReviews(\n            context.issue({ per_page: 50 }),\n          );\n\n          const hasChangesRequestedInReviews = reviews.some(\n            (review) =>\n              repoContext.getReviewerGroup(review.user.login) ===\n                reviewerGroup && review.state === 'REQUEST_CHANGES',\n          );\n\n          const hasApprovedInReviews = reviews.some(\n            (review) =>\n              repoContext.getReviewerGroup(review.user.login) ===\n                reviewerGroup && review.state === 'APPROVED',\n          );\n\n          const approved =\n            !hasRequestedReviewsForGroup &&\n            !hasChangesRequestedInReviews &&\n            hasApprovedInReviews;\n          await updateReviewStatus(context, repoContext, reviewerGroup, {\n            add: [\n              // if changes requested by the one which requests was removed\n              hasChangesRequestedInReviews && 'changesRequested',\n              // if was already approved by another member in the group and has no other requests waiting\n              approved && 'approved',\n            ],\n            // remove labels if has no other requests waiting\n            remove: [\n              approved && 'needsReview',\n              !hasRequestedReviewsForGroup &&\n                !hasChangesRequestedInReviews &&\n                'requested',\n            ],\n          });\n        }\n\n        if (sender.login === reviewer.login) return;\n\n        if (repoContext.slack) {\n          repoContext.slack.postMessage(\n            reviewer.login,\n            `:skull_and_crossbones: ${repoContext.slack.mention(\n              sender.login,\n            )} removed the request for your review on ${pr.html_url}`,\n          );\n        }\n      },\n    ),\n  );\n}\n","import { Application } from 'probot';\nimport { createHandlerPullRequestChange } from './utils';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\n\nexport default function reviewSubmitted(app: Application): void {\n  app.on(\n    'pull_request_review.submitted',\n    createHandlerPullRequestChange(\n      async (context, repoContext): Promise<void> => {\n        const pr = context.payload.pull_request;\n        const { user: reviewer, state } = (context.payload as any).review;\n        if (pr.user.login === reviewer.login) return;\n\n        const reviewerGroup = repoContext.getReviewerGroup(reviewer.login);\n        let merged;\n\n        if (reviewerGroup && repoContext.config.labels.review[reviewerGroup]) {\n          const hasRequestedReviewsForGroup = repoContext.reviewShouldWait(\n            reviewerGroup,\n            pr.requested_reviewers,\n            {\n              includesReviewerGroup: true,\n              // TODO reenable this when accepted can notify request review to slack (dev accepted => design requested) and flag to disable for label (approved design ; still waiting for dev ?)\n              // includesWaitForGroups: true,\n            },\n          );\n          const { data: reviews } = await context.github.pulls.listReviews(\n            context.issue({ per_page: 50 }),\n          );\n          const hasChangesRequestedInReviews = reviews.some(\n            (review) =>\n              repoContext.getReviewerGroup(review.user.login) ===\n                reviewerGroup && review.state === 'REQUEST_CHANGES',\n          );\n\n          const approved =\n            !hasRequestedReviewsForGroup &&\n            !hasChangesRequestedInReviews &&\n            state === 'approved';\n\n          const newLabels = await updateReviewStatus(\n            context,\n            repoContext,\n            reviewerGroup,\n            {\n              add: [\n                approved && 'approved',\n                state === 'changes_requested' && 'changesRequested',\n              ],\n              remove: [\n                approved && 'needsReview',\n                !(\n                  hasRequestedReviewsForGroup || state === 'changes_requested'\n                ) && 'requested',\n                state === 'approved' &&\n                  !hasChangesRequestedInReviews &&\n                  'changesRequested',\n                state === 'changes_requested' && 'approved',\n              ],\n            },\n          );\n\n          if (approved && !hasChangesRequestedInReviews) {\n            merged = await autoMergeIfPossible(\n              context,\n              repoContext,\n              pr,\n              newLabels,\n            );\n          }\n        }\n\n        const mention = repoContext.slack.mention(reviewer.login);\n        const prUrl = pr.html_url;\n\n        const message = (() => {\n          if (state === 'changes_requested') {\n            return `:x: ${mention} requests changes on ${prUrl}`;\n          }\n          if (state === 'approved') {\n            return `:clap: :white_check_mark: ${mention} approves ${prUrl}${\n              merged ? ' and PR is merged :tada:' : ''\n            }`;\n          }\n          return `:speech_balloon: ${mention} commented on ${prUrl}`;\n        })();\n\n        repoContext.slack.postMessage(pr.user.login, message);\n      },\n    ),\n  );\n}\n","import { Application } from 'probot';\nimport { createHandlerPullRequestChange } from './utils';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\n\nexport default function reviewDismissed(app: Application): void {\n  app.on(\n    'pull_request_review.dismissed',\n    createHandlerPullRequestChange(\n      async (context, repoContext): Promise<void> => {\n        const sender = context.payload.sender;\n        const pr = context.payload.pull_request;\n        const reviewer = (context.payload as any).review.user;\n\n        const reviewerGroup = repoContext.getReviewerGroup(reviewer.login);\n\n        if (reviewerGroup && repoContext.config.labels.review[reviewerGroup]) {\n          const { data: reviews } = await context.github.pulls.listReviews(\n            context.issue({ per_page: 50 }),\n          );\n          const hasChangesRequestedInReviews = reviews.some(\n            (review) =>\n              repoContext.getReviewerGroup(review.user.login) ===\n                reviewerGroup && review.state === 'REQUEST_CHANGES',\n          );\n\n          await updateReviewStatus(context, repoContext, reviewerGroup, {\n            add: ['needsReview', 'requested'],\n            remove: [\n              !hasChangesRequestedInReviews && 'changesRequested',\n              'approved',\n            ],\n          });\n        }\n\n        if (repoContext.slack) {\n          if (sender.login === reviewer.login) {\n            repoContext.slack.postMessage(\n              pr.user.login,\n              `:skull: ${repoContext.slack.mention(\n                reviewer.login,\n              )} dismissed his review on ${pr.html_url}`,\n            );\n          } else {\n            repoContext.slack.postMessage(\n              reviewer.login,\n              `:skull: ${repoContext.slack.mention(\n                sender.login,\n              )} dismissed your review on ${pr.html_url}`,\n            );\n          }\n        }\n      },\n    ),\n  );\n}\n","import { Application } from 'probot';\nimport { createHandlerPullRequestChange } from './utils';\nimport { editOpenedPR } from './actions/editOpenedPR';\nimport { updateStatusCheckFromLabels } from './actions/updateStatusCheckFromLabels';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\n\nexport default function synchronize(app: Application): void {\n  app.on(\n    'pull_request.synchronize',\n    createHandlerPullRequestChange(\n      async (context, repoContext): Promise<void> => {\n        // old and new sha\n        // const { before, after } = context.payload;\n\n        await Promise.all([\n          editOpenedPR(context, repoContext),\n          // addStatusCheckToLatestCommit\n          updateStatusCheckFromLabels(context, repoContext),\n          // call autoMergeIfPossible to re-add to the queue when push is fixed\n          autoMergeIfPossible(context, repoContext),\n        ]);\n      },\n    ),\n  );\n}\n","import { Application } from 'probot';\nimport { editOpenedPR } from './actions/editOpenedPR';\nimport { createHandlerPullRequestChange } from './utils';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\n\nexport default function edited(app: Application): void {\n  app.on(\n    'pull_request.edited',\n    createHandlerPullRequestChange(\n      async (context, repoContext): Promise<void> => {\n        await editOpenedPR(context, repoContext);\n\n        await autoMergeIfPossible(context, repoContext);\n      },\n    ),\n  );\n}\n","import { Application } from 'probot';\nimport { handlerPullRequestChange } from './utils';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { updateStatusCheckFromLabels } from './actions/updateStatusCheckFromLabels';\nimport { autoApproveAndAutoMerge } from './actions/autoApproveAndAutoMerge';\n\nexport default function labelsChanged(app: Application): void {\n  app.on(\n    ['pull_request.labeled', 'pull_request.unlabeled'],\n    async (context) => {\n      const sender = context.payload.sender;\n      const fromRenovate =\n        sender.type === 'Bot' &&\n        context.payload.pull_request.head.ref.startsWith('renovate/');\n\n      if (sender.type === 'Bot' && !fromRenovate) {\n        return;\n      }\n\n      await handlerPullRequestChange(context, async (repoContext) => {\n        if (fromRenovate) {\n          return autoApproveAndAutoMerge(context, repoContext);\n        }\n\n        const label = context.payload.label;\n        if (repoContext.protectedLabelIds.includes(label.id)) {\n          if (context.payload.action === 'labeled') {\n            await context.github.issues.removeLabel(\n              context.issue({ name: label.name }),\n            );\n          } else {\n            await context.github.issues.addLabels(\n              context.issue({ labels: [label.name] }),\n            );\n          }\n          return;\n        }\n\n        await updateStatusCheckFromLabels(context, repoContext);\n\n        if (context.payload.action === 'labeled') {\n          if (\n            repoContext.labels['merge/automerge'] &&\n            label.id === repoContext.labels['merge/automerge'].id\n          ) {\n            await autoMergeIfPossible(context, repoContext);\n          }\n\n          // if (\n          //   repoContext.labels['feature-branch'] &&\n          //   label.id === repoContext.labels['feature-branch'].id\n          // ) {\n          // }\n        }\n      });\n    },\n  );\n}\n","import { Application } from 'probot';\nimport { createHandlerPullRequestsChange } from './utils';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\n\nexport default function checkrunCompleted(app: Application): void {\n  app.on(\n    'check_run.completed',\n    createHandlerPullRequestsChange(\n      (context) => context.payload.check_run.pull_requests,\n      async (context, repoContext) => {\n        await Promise.all(\n          context.payload.check_run.pull_requests.map((pr) =>\n            context.github.pulls\n              .get(\n                context.repo({\n                  number: pr.number,\n                }),\n              )\n              .then((prResult) => {\n                return autoMergeIfPossible(context, repoContext, prResult.data);\n              }),\n          ),\n        );\n      },\n    ),\n  );\n}\n","import { Application } from 'probot';\nimport { createHandlerPullRequestsChange } from './utils';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\n\nexport default function checksuiteCompleted(app: Application): void {\n  app.on(\n    'check_suite.completed',\n    createHandlerPullRequestsChange(\n      (context) => context.payload.check_suite.pull_requests,\n      async (context, repoContext) => {\n        await Promise.all(\n          context.payload.check_suite.pull_requests.map((pr) =>\n            context.github.pulls\n              .get(\n                context.repo({\n                  number: pr.number,\n                }),\n              )\n              .then((prResult) => {\n                return autoMergeIfPossible(context, repoContext, prResult.data);\n              }),\n          ),\n        );\n      },\n    ),\n  );\n}\n","import Webhooks from '@octokit/webhooks';\nimport { Application, Context } from 'probot';\nimport { LockedMergePr } from '../context/repoContext';\nimport { createHandlerPullRequestsChange } from './utils';\n\nconst isSameBranch = (\n  context: Context<Webhooks.WebhookPayloadStatus>,\n  lockedPr: LockedMergePr,\n): boolean => {\n  if (!lockedPr) return false;\n  return !!context.payload.branches.find((b) => b.name === lockedPr.branch);\n};\n\nexport default function status(app: Application): void {\n  app.on(\n    'status',\n    createHandlerPullRequestsChange(\n      (context, repoContext): LockedMergePr[] => {\n        const lockedPr = repoContext.getMergeLockedPr();\n        if (!lockedPr) return [];\n\n        if (isSameBranch(context, lockedPr)) {\n          return [lockedPr];\n        }\n\n        return [];\n      },\n      (context, repoContext): void => {\n        const lockedPr = repoContext.getMergeLockedPr();\n        // check if changed\n        if (isSameBranch(context, lockedPr)) {\n          repoContext.reschedule(context, lockedPr);\n        }\n      },\n    ),\n  );\n}\n","import 'dotenv/config';\nimport { Probot, Application } from 'probot';\nimport openedHandler from './pr-handlers/opened';\nimport closedHandler from './pr-handlers/closed';\nimport reviewRequestedHandler from './pr-handlers/reviewRequested';\nimport reviewRequestRemovedHandler from './pr-handlers/reviewRequestRemoved';\nimport reviewSubmittedHandler from './pr-handlers/reviewSubmitted';\nimport reviewDismissedHandler from './pr-handlers/reviewDismissed';\nimport synchromizeHandler from './pr-handlers/synchronize';\nimport editedHandler from './pr-handlers/edited';\nimport labelsChanged from './pr-handlers/labelsChanged';\nimport checkrunCompleted from './pr-handlers/checkrunCompleted';\nimport checksuiteCompleted from './pr-handlers/checksuiteCompleted';\nimport status from './pr-handlers/status';\n\nif (!process.env.NAME) process.env.NAME = 'reviewflow';\n\n// const getConfig = require('probot-config')\n// const { MongoClient } = require('mongodb');\n\n// const connect = MongoClient.connect(process.env.MONGO_URL);\n// const db = connect.then(client => client.db(process.env.MONGO_DB));\n\n// let config = await getConfig(context, 'reviewflow.yml');\n\n// eslint-disable-next-line import/no-commonjs\nProbot.run((app: Application) => {\n  openedHandler(app);\n  closedHandler(app);\n  reviewRequestedHandler(app);\n  reviewRequestRemovedHandler(app);\n\n  // app.on('pull_request.closed', async context => {\n\n  // });\n\n  // app.on('pull_request.reopened', async context => {\n\n  // });\n\n  reviewSubmittedHandler(app);\n  reviewDismissedHandler(app);\n  labelsChanged(app);\n  synchromizeHandler(app);\n  editedHandler(app);\n\n  checkrunCompleted(app);\n  checksuiteCompleted(app);\n  status(app);\n});\n"],"names":["config","slackToken","process","env","ORNIKAR_SLACK_TOKEN","autoAssignToCreator","trimTitle","requiresReviewRequest","prDefaultOptions","featureBranch","deleteAfterMerge","parsePR","title","regExp","error","summary","bot","groups","dev","abarreir","ORNIKAR_EMAIL_DOMAIN","arthurflachs","CorentinAndre","rigma","damienorny","darame07","Pixy","christophehurpeau","HugoGarrido","LentnerStefan","Mxime","tilap","design","jperriere","CoralineColasse","waitForGroups","labels","list","name","color","review","ci","inProgress","succeeded","failed","needsReview","requested","changesRequested","approved","teamConfigs","ornikar","options","optionsRegexps","map","option","regexp","RegExp","optionsLabels","label","commentStart","commentEnd","regexpCols","regexpReviewflowCol","parseOptions","content","defaultConfig","reduce","acc","match","exec","parseBody","description","reviewFlowCol","reviewFlowColMatch","reviewflowContentColPrefix","reviewflowContentColSuffix","reviewflowContentCol","hasFailedStatusOrChecks","context","repoContext","pr","checks","github","listForRef","repo","ref","head","sha","per_page","failedChecks","data","check_runs","filter","check","conclusion","length","log","info","id","combinedStatus","repos","getCombinedStatusForRef","state","failedStatuses","statuses","status","autoMergeIfPossible","payload","pull_request","prLabels","autoMergeLabel","createMergeLockPrFromPr","number","branch","find","l","debug","removeMergeLockedPr","hasNeedsReview","hasRequestedReview","lockedPr","getMergeLockedPr","pushAutomergeQueue","addMergeLockPr","mergeable","undefined","prResult","pulls","get","pull_number","merged","mergeable_state","reschedule","startsWith","issues","update","body","replace","base","merge","owner","login","parsedBody","mergeResult","merge_method","commit_title","commit_message","Boolean","err","message","initRepoLabels","listLabelsForRepo","finalLabels","labelKey","labelConfig","Object","entries","labelColor","slice","existingLabel","result","createLabel","current_name","updateLabel","getKeys","o","keys","ExcludesFalsy","initTeamSlack","mention","postMessage","Promise","resolve","githubLoginToSlackEmail","groupName","assign","slackClient","WebClient","allUsers","users","limit","members","values","email","member","user","profile","console","warn","im","open","channel","membersMap","Map","getUserFromGithubLogin","githubLogin","text","DRY_RUN","chat","initTeamContext","slackPromise","githubLoginToGroup","forEach","set","getReviewerGroups","githubLogins","Set","getReviewerGroup","reviewShouldWait","reviewerGroup","requestedReviewers","includesReviewerGroup","includesWaitForGroups","requestedReviewerGroups","request","includes","some","group","slack","teamContextsPromise","teamContexts","obtainTeamContext","repository","existingTeamContext","existingPromise","promise","then","teamContext","delete","initRepoContext","create","all","reviewGroupNames","needsReviewLabelIds","key","requestedReviewLabelIds","changesRequestedLabelIds","approvedReviewLabelIds","protectedLabelIds","push","labelIdToGroupName","reviewGroupLabels","lock","Lock","lockMergePr","automergeQueue","lockPROrPRS","prIdOrIds","callback","reject","createReleaseCallback","release","Error","setTimeout","String","hasChangesRequestedReview","hasApprovesReview","getNeedsReviewGroupNames","shift","p","repoContextsPromise","repoContexts","obtainRepoContext","NAME","existingRepoContext","handlerPullRequestChange","createHandlerPullRequestChange","createHandlerPullRequestsChange","getPullRequests","prs","autoAssignPRToCreator","assignees","type","addAssignees","issue","cleanTitle","trim","s","arg1","toLowerCase","toMarkdownOptions","join","toMarkdownInfos","infos","url","updateBody","parsed","editOpenedPR","isPrFromBot","errorRule","rule","statusInfoFromMatch","date","Date","toISOString","hasLintPrCheck","createStatus","target_url","head_sha","started_at","completed_at","output","featureBranchLabel","prHasFeatureBranchLabel","defaultOptions","inBody","hasDiffInTitle","hasDiffInBody","removeLabel","addLabels","addStatusCheck","hasPrCheck","created_at","createFailedStatusCheck","updateStatusCheckFromLabels","requested_reviewers","rr","needsReviewGroupNames","updateReviewStatus","reviewGroup","add","labelsToAdd","remove","labelsToRemove","newLabelNames","toAdd","toDelete","getLabelFromKey","reviewConfig","prLabel","existing","newLabelNamesArray","oldLabels","size","replaceLabels","autoApproveAndAutoMerge","codeApprovedLabel","createReview","event","opened","app","on","fromRenovate","closed","git","deleteRef","catch","reviewRequested","sender","reviewer","requested_reviewer","reviews","listReviews","hasChangesRequestedInReviews","html_url","reviewRequestRemoved","hasRequestedReviewsForGroup","hasApprovedInReviews","reviewSubmitted","newLabels","prUrl","reviewDismissed","synchronize","edited","labelsChanged","action","checkrunCompleted","check_run","pull_requests","checksuiteCompleted","check_suite","isSameBranch","branches","b","Probot","run","openedHandler","closedHandler","reviewRequestedHandler","reviewRequestRemovedHandler","reviewSubmittedHandler","reviewDismissedHandler","synchromizeHandler","editedHandler"],"mappings":"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"}